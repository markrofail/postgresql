-- tests for tidscans
CREATE TABLE tidscan(id integer);
-- only insert a few rows, we don't want to spill onto a second table page
INSERT INTO tidscan VALUES (1), (2), (3);
-- show ctids
SELECT ctid, * FROM tidscan;
 ctid  | id 
-------+----
 (0,1) |  1
 (0,2) |  2
 (0,3) |  3
(3 rows)

-- ctid equality - implemented as tidscan
EXPLAIN (COSTS OFF)
SELECT ctid, * FROM tidscan WHERE ctid = '(0,1)';
            QUERY PLAN             
-----------------------------------
 Tid Scan on tidscan
   TID Cond: (ctid = '(0,1)'::tid)
(2 rows)

SELECT ctid, * FROM tidscan WHERE ctid = '(0,1)';
 ctid  | id 
-------+----
 (0,1) |  1
(1 row)

EXPLAIN (COSTS OFF)
SELECT ctid, * FROM tidscan WHERE '(0,1)' = ctid;
            QUERY PLAN             
-----------------------------------
 Tid Scan on tidscan
   TID Cond: ('(0,1)'::tid = ctid)
(2 rows)

SELECT ctid, * FROM tidscan WHERE '(0,1)' = ctid;
 ctid  | id 
-------+----
 (0,1) |  1
(1 row)

-- ctid = ScalarArrayOp - implemented as tidscan
EXPLAIN (COSTS OFF)
SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
                      QUERY PLAN                       
-------------------------------------------------------
 Tid Scan on tidscan
   TID Cond: (ctid = ANY ('{"(0,1)","(0,2)"}'::tid[]))
(2 rows)

SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
 ctid  | id 
-------+----
 (0,1) |  1
 (0,2) |  2
(2 rows)

-- ctid != ScalarArrayOp - can't be implemented as tidscan
EXPLAIN (COSTS OFF)
SELECT ctid, * FROM tidscan WHERE ctid != ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
                      QUERY PLAN                      
------------------------------------------------------
 Seq Scan on tidscan
   Filter: (ctid <> ANY ('{"(0,1)","(0,2)"}'::tid[]))
(2 rows)

SELECT ctid, * FROM tidscan WHERE ctid != ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
 ctid  | id 
-------+----
 (0,1) |  1
 (0,2) |  2
 (0,3) |  3
(3 rows)

-- tid equality extracted from sub-AND clauses
EXPLAIN (COSTS OFF)
SELECT ctid, * FROM tidscan
WHERE (id = 3 AND ctid IN ('(0,2)', '(0,3)')) OR (ctid = '(0,1)' AND id = 1);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Tid Scan on tidscan
   TID Cond: ((ctid = ANY ('{"(0,2)","(0,3)"}'::tid[])) OR (ctid = '(0,1)'::tid))
   Filter: (((id = 3) AND (ctid = ANY ('{"(0,2)","(0,3)"}'::tid[]))) OR ((ctid = '(0,1)'::tid) AND (id = 1)))
(3 rows)

SELECT ctid, * FROM tidscan
WHERE (id = 3 AND ctid IN ('(0,2)', '(0,3)')) OR (ctid = '(0,1)' AND id = 1);
 ctid  | id 
-------+----
 (0,1) |  1
 (0,3) |  3
(2 rows)

-- exercise backward scan and rewind
BEGIN;
DECLARE c CURSOR FOR
SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
FETCH ALL FROM c;
 ctid  | id 
-------+----
 (0,1) |  1
 (0,2) |  2
(2 rows)

FETCH BACKWARD 1 FROM c;
 ctid  | id 
-------+----
 (0,2) |  2
(1 row)

FETCH FIRST FROM c;
 ctid  | id 
-------+----
 (0,1) |  1
(1 row)

ROLLBACK;
-- tidscan via CURRENT OF
BEGIN;
DECLARE c CURSOR FOR SELECT ctid, * FROM tidscan;
FETCH NEXT FROM c; -- skip one row
 ctid  | id 
-------+----
 (0,1) |  1
(1 row)

FETCH NEXT FROM c;
 ctid  | id 
-------+----
 (0,2) |  2
(1 row)

-- perform update
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;
                    QUERY PLAN                     
---------------------------------------------------
 Update on tidscan (actual rows=1 loops=1)
   ->  Tid Scan on tidscan (actual rows=1 loops=1)
         TID Cond: CURRENT OF c
(3 rows)

FETCH NEXT FROM c;
 ctid  | id 
-------+----
 (0,3) |  3
(1 row)

-- perform update
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;
                    QUERY PLAN                     
---------------------------------------------------
 Update on tidscan (actual rows=1 loops=1)
   ->  Tid Scan on tidscan (actual rows=1 loops=1)
         TID Cond: CURRENT OF c
(3 rows)

SELECT * FROM tidscan;
 id 
----
  1
 -2
 -3
(3 rows)

-- position cursor past any rows
FETCH NEXT FROM c;
 ctid | id 
------+----
(0 rows)

-- should error out
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;
ERROR:  cursor "c" is not positioned on a row
ROLLBACK;
-- tests for tidrangescans
CREATE TABLE tidrangescan(id integer, data text);
INSERT INTO tidrangescan SELECT i,repeat('x', 100) FROM generate_series(1,1000) AS s(i);
DELETE FROM tidrangescan WHERE substring(ctid::text from ',(\d+)\)')::integer > 10 OR substring(ctid::text from '\((\d+),')::integer >= 10;;
VACUUM tidrangescan;
-- range scans with upper bound
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
            QUERY PLAN             
-----------------------------------
 Tid Scan on tidrangescan
   TID Cond: (ctid < '(1,0)'::tid)
(2 rows)

SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
  ctid  
--------
 (0,1)
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (0,7)
 (0,8)
 (0,9)
 (0,10)
(10 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)';
             QUERY PLAN             
------------------------------------
 Tid Scan on tidrangescan
   TID Cond: (ctid <= '(1,5)'::tid)
(2 rows)

SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)';
  ctid  
--------
 (0,1)
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (0,7)
 (0,8)
 (0,9)
 (0,10)
 (1,1)
 (1,2)
 (1,3)
 (1,4)
 (1,5)
(15 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)';
            QUERY PLAN             
-----------------------------------
 Tid Scan on tidrangescan
   TID Cond: (ctid < '(0,0)'::tid)
(2 rows)

SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)';
 ctid 
------
(0 rows)

-- range scans with lower bound
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(9,8)';
            QUERY PLAN             
-----------------------------------
 Tid Scan on tidrangescan
   TID Cond: (ctid > '(9,8)'::tid)
(2 rows)

SELECT ctid FROM tidrangescan WHERE ctid > '(9,8)';
  ctid  
--------
 (9,9)
 (9,10)
(2 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(9,8)' < ctid;
            QUERY PLAN             
-----------------------------------
 Tid Scan on tidrangescan
   TID Cond: ('(9,8)'::tid < ctid)
(2 rows)

SELECT ctid FROM tidrangescan WHERE '(9,8)' < ctid;
  ctid  
--------
 (9,9)
 (9,10)
(2 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid >= '(9,8)';
             QUERY PLAN             
------------------------------------
 Tid Scan on tidrangescan
   TID Cond: (ctid >= '(9,8)'::tid)
(2 rows)

SELECT ctid FROM tidrangescan WHERE ctid >= '(9,8)';
  ctid  
--------
 (9,8)
 (9,9)
 (9,10)
(3 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)';
              QUERY PLAN              
--------------------------------------
 Tid Scan on tidrangescan
   TID Cond: (ctid >= '(100,0)'::tid)
(2 rows)

SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)';
 ctid 
------
(0 rows)

-- range scans with both bounds
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(4,4)' AND '(4,7)' >= ctid;
                           QUERY PLAN                           
----------------------------------------------------------------
 Tid Scan on tidrangescan
   TID Cond: ((ctid > '(4,4)'::tid) AND ('(4,7)'::tid >= ctid))
(2 rows)

SELECT ctid FROM tidrangescan WHERE ctid > '(4,4)' AND '(4,7)' >= ctid;
 ctid  
-------
 (4,5)
 (4,6)
 (4,7)
(3 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(4,7)' >= ctid AND ctid > '(4,4)';
                           QUERY PLAN                           
----------------------------------------------------------------
 Tid Scan on tidrangescan
   TID Cond: (('(4,7)'::tid >= ctid) AND (ctid > '(4,4)'::tid))
(2 rows)

SELECT ctid FROM tidrangescan WHERE '(4,7)' >= ctid AND ctid > '(4,4)';
 ctid  
-------
 (4,5)
 (4,6)
 (4,7)
(3 rows)

-- combinations
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(4,7)' >= ctid AND ctid > '(4,4)' OR ctid = '(2,2)';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Tid Scan on tidrangescan
   TID Cond: ((('(4,7)'::tid >= ctid) AND (ctid > '(4,4)'::tid)) OR (ctid = '(2,2)'::tid))
(2 rows)

SELECT ctid FROM tidrangescan WHERE '(4,7)' >= ctid AND ctid > '(4,4)' OR ctid = '(2,2)';
 ctid  
-------
 (2,2)
 (4,5)
 (4,6)
 (4,7)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(4,7)' >= ctid AND ctid > '(4,4)' OR ctid = '(2,2)' AND data = 'foo';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Tid Scan on tidrangescan
   TID Cond: ((('(4,7)'::tid >= ctid) AND (ctid > '(4,4)'::tid)) OR (ctid = '(2,2)'::tid))
   Filter: ((('(4,7)'::tid >= ctid) AND (ctid > '(4,4)'::tid)) OR ((ctid = '(2,2)'::tid) AND (data = 'foo'::text)))
(3 rows)

SELECT ctid FROM tidrangescan WHERE '(4,7)' >= ctid AND ctid > '(4,4)' OR ctid = '(2,2)' AND data = 'foo';
 ctid  
-------
 (4,5)
 (4,6)
 (4,7)
(3 rows)

-- extreme offsets
SELECT ctid FROM tidrangescan where ctid > '(0,65535)' AND ctid < '(1,0)' LIMIT 1;
 ctid 
------
(0 rows)

SELECT ctid FROM tidrangescan where ctid < '(0,0)' LIMIT 1;
 ctid 
------
(0 rows)

-- make sure ranges are combined correctly
SELECT COUNT(*) FROM tidrangescan WHERE ctid < '(0,3)' OR ctid >= '(0,2)' AND ctid <= '(0,5)';
 count 
-------
     5
(1 row)

SELECT COUNT(*) FROM tidrangescan WHERE ctid <= '(0,10)' OR ctid >= '(0,2)' AND ctid <= '(0,5)';
 count 
-------
    10
(1 row)

-- empty table
CREATE TABLE tidrangescan_empty(id integer, data text);
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan_empty WHERE ctid < '(1, 0)';
            QUERY PLAN             
-----------------------------------
 Tid Scan on tidrangescan_empty
   TID Cond: (ctid < '(1,0)'::tid)
(2 rows)

SELECT ctid FROM tidrangescan_empty WHERE ctid < '(1, 0)';
 ctid 
------
(0 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan_empty WHERE ctid > '(9, 0)';
            QUERY PLAN             
-----------------------------------
 Tid Scan on tidrangescan_empty
   TID Cond: (ctid > '(9,0)'::tid)
(2 rows)

SELECT ctid FROM tidrangescan_empty WHERE ctid > '(9, 0)';
 ctid 
------
(0 rows)

-- check that ordering on a tidscan doesn't require a sort
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidscan WHERE ctid = ANY(ARRAY['(0,2)', '(0,1)', '(0,3)']::tid[]) ORDER BY ctid;
                          QUERY PLAN                           
---------------------------------------------------------------
 Tid Scan on tidscan
   TID Cond: (ctid = ANY ('{"(0,2)","(0,1)","(0,3)"}'::tid[]))
(2 rows)

SELECT ctid FROM tidscan WHERE ctid = ANY(ARRAY['(0,2)', '(0,1)', '(0,3)']::tid[]) ORDER BY ctid;
 ctid  
-------
 (0,1)
 (0,2)
 (0,3)
(3 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidscan WHERE ctid = ANY(ARRAY['(0,2)', '(0,1)', '(0,3)']::tid[]) ORDER BY ctid DESC;
                          QUERY PLAN                           
---------------------------------------------------------------
 Tid Scan Backward on tidscan
   TID Cond: (ctid = ANY ('{"(0,2)","(0,1)","(0,3)"}'::tid[]))
(2 rows)

SELECT ctid FROM tidscan WHERE ctid = ANY(ARRAY['(0,2)', '(0,1)', '(0,3)']::tid[]) ORDER BY ctid DESC;
 ctid  
-------
 (0,3)
 (0,2)
 (0,1)
(3 rows)

-- ordering with no quals should use tid range scan
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan ORDER BY ctid ASC;
        QUERY PLAN        
--------------------------
 Tid Scan on tidrangescan
(1 row)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan ORDER BY ctid DESC;
            QUERY PLAN             
-----------------------------------
 Tid Scan Backward on tidrangescan
(1 row)

-- min/max
EXPLAIN (COSTS OFF)
SELECT MIN(ctid) FROM tidrangescan;
                 QUERY PLAN                 
--------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Tid Scan on tidrangescan
                 Filter: (ctid IS NOT NULL)
(5 rows)

SELECT MIN(ctid) FROM tidrangescan;
  min  
-------
 (0,1)
(1 row)

EXPLAIN (COSTS OFF)
SELECT MAX(ctid) FROM tidrangescan;
                   QUERY PLAN                    
-------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Tid Scan Backward on tidrangescan
                 Filter: (ctid IS NOT NULL)
(5 rows)

SELECT MAX(ctid) FROM tidrangescan;
  max   
--------
 (9,10)
(1 row)

EXPLAIN (COSTS OFF)
SELECT MIN(ctid) FROM tidrangescan WHERE ctid > '(5,0)';
                   QUERY PLAN                    
-------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Tid Scan on tidrangescan
                 TID Cond: (ctid > '(5,0)'::tid)
                 Filter: (ctid IS NOT NULL)
(6 rows)

SELECT MIN(ctid) FROM tidrangescan WHERE ctid > '(5,0)';
  min  
-------
 (5,1)
(1 row)

EXPLAIN (COSTS OFF)
SELECT MAX(ctid) FROM tidrangescan WHERE ctid < '(5,0)';
                   QUERY PLAN                    
-------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Tid Scan Backward on tidrangescan
                 TID Cond: (ctid < '(5,0)'::tid)
                 Filter: (ctid IS NOT NULL)
(6 rows)

SELECT MAX(ctid) FROM tidrangescan WHERE ctid < '(5,0)';
  max   
--------
 (4,10)
(1 row)

-- clean up
DROP TABLE tidscan;
DROP TABLE tidrangescan;
