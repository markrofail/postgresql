--
-- SI_ST_SM_SR
-- Test cases for recreating CREATE commands
--
CREATE TABLE smtest (id int NOT NULL PRIMARY KEY, type text NOT NULL, amt numeric NOT NULL);
CREATE VIEW smtestv AS SELECT type, sum(amt) AS totamt FROM smtest GROUP BY type;
CREATE MATERIALIZED VIEW smtestm AS SELECT type, sum(amt) AS totamt FROM smtest GROUP BY type WITH NO DATA;
CREATE MATERIALIZED VIEW smtestvm AS SELECT * FROM smtestv ORDER BY type;
\sm smtestm
CREATE MATERIALIZED VIEW smtestm
    USING heap
    TABLESPACE public
    AS
    SELECT smtest.type,
    sum(smtest.amt) AS totamt
   FROM smtest
  GROUP BY smtest.type;
\sm smtestvm
CREATE MATERIALIZED VIEW smtestvm
    USING heap
    TABLESPACE public
    AS
    SELECT smtestv.type,
    smtestv.totamt
   FROM smtestv
  ORDER BY smtestv.type;
DROP TABLE smtest CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to view smtestv
drop cascades to materialized view smtestvm
drop cascades to materialized view smtestm
create table pkeys (pkey1 int4 not null, pkey2 text not null);
create table fkeys (fkey1 int4, fkey2 text, fkey3 int);
create table fkeys2 (fkey21 int4, fkey22 text, pkey23 int not null);
create trigger check_fkeys_pkey_exist
	before insert or update on fkeys
	for each row
	execute function
	check_primary_key ('fkey1', 'fkey2', 'pkeys', 'pkey1', 'pkey2');
create trigger check_fkeys2_pkey_exist
	before insert or update on fkeys2
	for each row
	execute procedure
	check_primary_key ('fkey21', 'fkey22', 'pkeys', 'pkey1', 'pkey2');
create trigger check_fkeys2_pkey_exist
	before insert or update on fkeys
	for each row
	execute procedure
	check_primary_key ('fkey21', 'fkey22');
\st fkeys TRIGGER check_fkeys_pkey_exist
CREATE TRIGGER check_fkeys_pkey_exist BEFORE INSERT OR UPDATE ON public.fkeys FOR EACH ROW EXECUTE FUNCTION check_primary_key('fkey1', 'fkey2', 'pkeys', 'pkey1', 'pkey2')
\st fkeys2 TRIGGER check_fkeys2_pkey_exist
CREATE TRIGGER check_fkeys2_pkey_exist BEFORE INSERT OR UPDATE ON public.fkeys2 FOR EACH ROW EXECUTE FUNCTION check_primary_key('fkey21', 'fkey22', 'pkeys', 'pkey1', 'pkey2')
\st fkeys TRIGGER check_fkeys2_pkey_exist
CREATE TRIGGER check_fkeys2_pkey_exist BEFORE INSERT OR UPDATE ON public.fkeys FOR EACH ROW EXECUTE FUNCTION check_primary_key('fkey21', 'fkey22')
DROP TABLE pkeys;
DROP TABLE fkeys;
DROP TABLE fkeys2;
create table idxtable (a int, b int, c text);
create index idx on idxtable using hash (a);
create index idx2 on idxtable (c COLLATE "POSIX");
\si idx
CREATE INDEX idx ON public.idxtable USING hash (a)
\si idx2
CREATE INDEX idx2 ON public.idxtable USING btree (c COLLATE "POSIX")
drop index idx;
drop index idx2;
drop table idxtable;
CREATE TABLE collate_test (
    a int,
    b text COLLATE "C" NOT NULL
);
\sr collate_test
CREATE TABLE public.collate_test (
    a integer,
    b text NOT NULL COLLATE C
 ) 
DROP TABLE collate_test;
CREATE TABLE ptif_test (a int, b int) PARTITION BY range (a);
CREATE TABLE ptif_test0 PARTITION OF ptif_test
  FOR VALUES FROM (minvalue) TO (0) PARTITION BY list (b);
\sr ptif_test
CREATE TABLE public.ptif_test (
    a integer,
    b integer
 ) 
PARTITION BY RANGE (a)
\sr ptif_test0
CREATE TABLE public.ptif_test0 PARTITION OF ptif_test (
    a integer,
    b integer
 ) FOR VALUES FROM (MINVALUE) TO (0)
PARTITION BY LIST (b)
DROP TABLE ptif_test0;
DROP TABLE ptif_test;
CREATE TABLE srtest0 (aa TEXT);
CREATE TABLE srtest1 (bb TEXT) INHERITS (srtest0);
CREATE TABLE srtest2 (cc TEXT) INHERITS (srtest0);
CREATE TABLE srtest3 (dd TEXT) INHERITS (srtest1, srtest2, srtest0);
NOTICE:  merging multiple inherited definitions of column "aa"
NOTICE:  merging multiple inherited definitions of column "aa"
\sr srtest0
CREATE TABLE public.srtest0 (
    aa text
 ) 
\sr srtest1
CREATE TABLE public.srtest1 (
    aa text,
    bb text
 ) 
INHERITS srtest0
\sr srtest2
CREATE TABLE public.srtest2 (
    aa text,
    cc text
 ) 
INHERITS srtest0
\sr srtest3
CREATE TABLE public.srtest3 (
    aa text,
    bb text,
    cc text,
    dd text
 ) 
INHERITS srtest1, srtest2, srtest0
DROP TABLE srtest0 CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table srtest1
drop cascades to table srtest2
drop cascades to table srtest3
CREATE TABLE srtest4 (id int, name text) WITH (fillfactor=10);
\sr srtest4
CREATE TABLE public.srtest4 (
    id integer,
    name text
 ) 
 WITH (fillfactor='10')
DROP TABLE srtest4;
CREATE TABLE constraint_test(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL UNIQUE,
   ADDRESS        CHAR(50),
   SALARY         REAL    DEFAULT 50000.00
);
\sr constraint_test
CREATE TABLE public.constraint_test (
    id integer NOT NULL,
    name text NOT NULL,
    age integer NOT NULL,
    address character,
    salary real DEFAULT 50000.00,
    CONSTRAINT constraint_test_age_key UNIQUE (age),
    CONSTRAINT constraint_test_pkey PRIMARY KEY (id)
 ) 
DROP TABLE constraint_test;
