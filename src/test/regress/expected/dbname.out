CREATE ROLE dbuser1 with LOGIN;
CREATE ROLE dbuser2 with SUPERUSER LOGIN;
CREATE ROLE dbuser3 with SUPERUSER LOGIN;
CREATE DATABASE mydb1 with owner=dbuser1;
CREATE DATABASE "current_database" with owner=dbuser1;
CREATE DATABASE current_database with owner=dbuser1;
ERROR:  CURRENT_DATABASE cannot be used as a database name here
LINE 1: CREATE DATABASE current_database with owner=dbuser1;
                        ^
SELECT d.datname as "Name",
       pg_catalog.shobj_description(d.oid, 'pg_database') as "Description"
FROM pg_catalog.pg_database d
  	JOIN pg_catalog.pg_tablespace t on d.dattablespace = t.oid
ORDER BY 1;
       Name       |                Description                 
------------------+--------------------------------------------
 current_database | 
 mydb1            | 
 postgres         | default administrative connection database
 regression       | 
 template0        | unmodifiable empty database
 template1        | default template for new databases
(6 rows)

\c mydb1;
SELECT CURRENT_DATABASE;
 current_database 
------------------
 mydb1
(1 row)

COMMENT ON DATABASE current_database IS 'db1';
COMMENT ON DATABASE "current_database" IS 'db2';
SELECT d.datname as "Name",
       pg_catalog.shobj_description(d.oid, 'pg_database') as "Description"
FROM pg_catalog.pg_database d
  	JOIN pg_catalog.pg_tablespace t on d.dattablespace = t.oid
ORDER BY 1;
       Name       |                Description                 
------------------+--------------------------------------------
 current_database | db2
 mydb1            | db1
 postgres         | default administrative connection database
 regression       | 
 template0        | unmodifiable empty database
 template1        | default template for new databases
(6 rows)

-- test alter owner
ALTER DATABASE current_database OWNER to dbuser2; 
ALTER DATABASE "current_database" OWNER to dbuser2;
SELECT d.datname as "Name",
       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
       pg_catalog.shobj_description(d.oid, 'pg_database') as "Description"
FROM pg_catalog.pg_database d
  	JOIN pg_catalog.pg_tablespace t on d.dattablespace = t.oid
WHERE d.datname='current_database' or d.datname='mydb1'
ORDER BY 1;
       Name       |  Owner  | Description 
------------------+---------+-------------
 current_database | dbuser2 | db2
 mydb1            | dbuser2 | db1
(2 rows)

-- test alter database tablespace
ALTER DATABASE current_database SET TABLESPACE pg_default;
ERROR:  cannot change the tablespace of the currently open database
ALTER DATABASE "current_database" SET TABLESPACE pg_default;
-- test alter database rename
ALTER DATABASE current_database rename to mydb2;
ERROR:  CURRENT_DATABASE cannot be used as a database name here
LINE 1: ALTER DATABASE current_database rename to mydb2;
                       ^
ALTER DATABASE "current_database" rename to mydb2;
ALTER DATABASE mydb2 rename to current_database;
ERROR:  CURRENT_DATABASE cannot be used as a database name here
LINE 1: ALTER DATABASE mydb2 rename to current_database;
                                       ^
SELECT d.datname as "Name",
       pg_catalog.shobj_description(d.oid, 'pg_database') as "Description"
FROM pg_catalog.pg_database d
  	JOIN pg_catalog.pg_tablespace t on d.dattablespace = t.oid
ORDER BY 1;
    Name    |                Description                 
------------+--------------------------------------------
 mydb1      | db1
 mydb2      | db2
 postgres   | default administrative connection database
 regression | 
 template0  | unmodifiable empty database
 template1  | default template for new databases
(6 rows)

-- test alter database set parameter
ALTER DATABASE current_database SET parallel_tuple_cost=0.3;
\c mydb1
show parallel_tuple_cost;
 parallel_tuple_cost 
---------------------
 0.3
(1 row)

ALTER DATABASE current_database RESET parallel_tuple_cost;
\c mydb1
show parallel_tuple_cost;
 parallel_tuple_cost 
---------------------
 0.1
(1 row)

-- clean up
\c postgres
DROP DATABASE IF EXISTS "current_database";
NOTICE:  database "current_database" does not exist, skipping
DROP DATABASE IF EXISTS mydb1;
DROP DATABASE IF EXISTS mydb2;
DROP ROLE dbuser1;
DROP ROLE dbuser2;
DROP ROLE dbuser3;
