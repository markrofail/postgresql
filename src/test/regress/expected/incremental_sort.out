-- When we have to sort the entire table, incremental sort will
-- be slower than plain sort, so it should not be used.
explain (costs off)
select * from (select * from tenk1 order by four) t order by four, ten;
            QUERY PLAN             
-----------------------------------
 Sort
   Sort Key: tenk1.four, tenk1.ten
   ->  Sort
         Sort Key: tenk1.four
         ->  Seq Scan on tenk1
(5 rows)

-- When there is a LIMIT clause, incremental sort is beneficial because
-- it only has to sort some of the groups, and not the entire table.
explain (costs off)
select * from (select * from tenk1 order by four) t order by four, ten
limit 1;
               QUERY PLAN                
-----------------------------------------
 Limit
   ->  Incremental Sort
         Sort Key: tenk1.four, tenk1.ten
         Presorted Key: tenk1.four
         ->  Sort
               Sort Key: tenk1.four
               ->  Seq Scan on tenk1
(7 rows)

-- When work_mem is not enough to sort the entire table, incremental sort
-- may be faster if individual groups still fit into work_mem.
set work_mem to '2MB';
explain (costs off)
select * from (select * from tenk1 order by four) t order by four, ten;
            QUERY PLAN             
-----------------------------------
 Incremental Sort
   Sort Key: tenk1.four, tenk1.ten
   Presorted Key: tenk1.four
   ->  Sort
         Sort Key: tenk1.four
         ->  Seq Scan on tenk1
(6 rows)

reset work_mem;
