CREATE TABLE test_replica_identity (
       id serial primary key,
       keya text not null,
       keyb text not null,
       nonkey text,
       CONSTRAINT test_replica_identity_unique_defer UNIQUE (keya, keyb) DEFERRABLE,
       CONSTRAINT test_replica_identity_unique_nondefer UNIQUE (keya, keyb)
) ;
CREATE TABLE test_replica_identity_othertable (id serial primary key);
CREATE INDEX test_replica_identity_keyab ON test_replica_identity (keya, keyb);
CREATE UNIQUE INDEX test_replica_identity_keyab_key ON test_replica_identity (keya, keyb);
CREATE UNIQUE INDEX test_replica_identity_nonkey ON test_replica_identity (keya, nonkey);
CREATE INDEX test_replica_identity_hash ON test_replica_identity USING hash (nonkey);
CREATE UNIQUE INDEX test_replica_identity_expr ON test_replica_identity (keya, keyb, (3));
CREATE UNIQUE INDEX test_replica_identity_partial ON test_replica_identity (keya, keyb) WHERE keyb != '3';
-- default is 'd'/DEFAULT for user created tables
SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass;
 relreplident 
--------------
 d
(1 row)

-- but 'none' for system tables
SELECT relreplident FROM pg_class WHERE oid = 'pg_class'::regclass;
 relreplident 
--------------
 n
(1 row)

SELECT relreplident FROM pg_class WHERE oid = 'pg_constraint'::regclass;
 relreplident 
--------------
 n
(1 row)

----
-- Make sure we detect ineligible indexes
----
-- fail, not unique
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_keyab;
ERROR:  cannot use non-unique index "test_replica_identity_keyab" as replica identity
-- fail, not a candidate key, nullable column
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_nonkey;
ERROR:  index "test_replica_identity_nonkey" cannot be used as replica identity because column "nonkey" is nullable
-- fail, hash indexes cannot do uniqueness
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_hash;
ERROR:  cannot use non-unique index "test_replica_identity_hash" as replica identity
-- fail, expression index
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_expr;
ERROR:  cannot use expression index "test_replica_identity_expr" as replica identity
-- fail, partial index
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_partial;
ERROR:  cannot use partial index "test_replica_identity_partial" as replica identity
-- fail, not our index
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_othertable_pkey;
ERROR:  "test_replica_identity_othertable_pkey" is not an index for table "test_replica_identity"
-- fail, deferrable
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_unique_defer;
ERROR:  cannot use non-immediate index "test_replica_identity_unique_defer" as replica identity
SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass;
 relreplident 
--------------
 d
(1 row)

----
-- Make sure index cases succeed
----
-- succeed, primary key
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_pkey;
SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass;
 relreplident 
--------------
 i
(1 row)

\d test_replica_identity
                            Table "public.test_replica_identity"
 Column |  Type   | Collation | Nullable |                      Default                      
--------+---------+-----------+----------+---------------------------------------------------
 id     | integer |           | not null | nextval('test_replica_identity_id_seq'::regclass)
 keya   | text    |           | not null | 
 keyb   | text    |           | not null | 
 nonkey | text    |           |          | 
Indexes:
    "test_replica_identity_pkey" PRIMARY KEY, btree (id) REPLICA IDENTITY
    "test_replica_identity_expr" UNIQUE, btree (keya, keyb, (3))
    "test_replica_identity_keyab_key" UNIQUE, btree (keya, keyb)
    "test_replica_identity_nonkey" UNIQUE, btree (keya, nonkey)
    "test_replica_identity_partial" UNIQUE, btree (keya, keyb) WHERE keyb <> '3'::text
    "test_replica_identity_unique_defer" UNIQUE CONSTRAINT, btree (keya, keyb) DEFERRABLE
    "test_replica_identity_unique_nondefer" UNIQUE CONSTRAINT, btree (keya, keyb)
    "test_replica_identity_hash" hash (nonkey)
    "test_replica_identity_keyab" btree (keya, keyb)

-- succeed, nondeferrable unique constraint over nonnullable cols
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_unique_nondefer;
-- succeed unique index over nonnullable cols
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_keyab_key;
ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_keyab_key;
SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass;
 relreplident 
--------------
 i
(1 row)

\d test_replica_identity
                            Table "public.test_replica_identity"
 Column |  Type   | Collation | Nullable |                      Default                      
--------+---------+-----------+----------+---------------------------------------------------
 id     | integer |           | not null | nextval('test_replica_identity_id_seq'::regclass)
 keya   | text    |           | not null | 
 keyb   | text    |           | not null | 
 nonkey | text    |           |          | 
Indexes:
    "test_replica_identity_pkey" PRIMARY KEY, btree (id)
    "test_replica_identity_expr" UNIQUE, btree (keya, keyb, (3))
    "test_replica_identity_keyab_key" UNIQUE, btree (keya, keyb) REPLICA IDENTITY
    "test_replica_identity_nonkey" UNIQUE, btree (keya, nonkey)
    "test_replica_identity_partial" UNIQUE, btree (keya, keyb) WHERE keyb <> '3'::text
    "test_replica_identity_unique_defer" UNIQUE CONSTRAINT, btree (keya, keyb) DEFERRABLE
    "test_replica_identity_unique_nondefer" UNIQUE CONSTRAINT, btree (keya, keyb)
    "test_replica_identity_hash" hash (nonkey)
    "test_replica_identity_keyab" btree (keya, keyb)

SELECT count(*) FROM pg_index WHERE indrelid = 'test_replica_identity'::regclass AND indisreplident;
 count 
-------
     1
(1 row)

----
-- Make sure non index cases work
----
ALTER TABLE test_replica_identity REPLICA IDENTITY DEFAULT;
SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass;
 relreplident 
--------------
 d
(1 row)

SELECT count(*) FROM pg_index WHERE indrelid = 'test_replica_identity'::regclass AND indisreplident;
 count 
-------
     0
(1 row)

ALTER TABLE test_replica_identity REPLICA IDENTITY FULL;
SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass;
 relreplident 
--------------
 f
(1 row)

\d+ test_replica_identity
                                                Table "public.test_replica_identity"
 Column |  Type   | Collation | Nullable |                      Default                      | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------------------------------------------------+----------+--------------+-------------
 id     | integer |           | not null | nextval('test_replica_identity_id_seq'::regclass) | plain    |              | 
 keya   | text    |           | not null |                                                   | extended |              | 
 keyb   | text    |           | not null |                                                   | extended |              | 
 nonkey | text    |           |          |                                                   | extended |              | 
Indexes:
    "test_replica_identity_pkey" PRIMARY KEY, btree (id)
    "test_replica_identity_expr" UNIQUE, btree (keya, keyb, (3))
    "test_replica_identity_keyab_key" UNIQUE, btree (keya, keyb)
    "test_replica_identity_nonkey" UNIQUE, btree (keya, nonkey)
    "test_replica_identity_partial" UNIQUE, btree (keya, keyb) WHERE keyb <> '3'::text
    "test_replica_identity_unique_defer" UNIQUE CONSTRAINT, btree (keya, keyb) DEFERRABLE
    "test_replica_identity_unique_nondefer" UNIQUE CONSTRAINT, btree (keya, keyb)
    "test_replica_identity_hash" hash (nonkey)
    "test_replica_identity_keyab" btree (keya, keyb)
Replica Identity: FULL

ALTER TABLE test_replica_identity REPLICA IDENTITY NOTHING;
SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass;
 relreplident 
--------------
 n
(1 row)

DROP TABLE test_replica_identity;
DROP TABLE test_replica_identity_othertable;
----
-- Make sure it propagates to partitions
----
CREATE TABLE test_replica_identity_part (a int, b int) PARTITION BY RANGE (a);
CREATE TABLE test_replica_identity_part1 PARTITION OF test_replica_identity_part
  FOR VALUES FROM (0) TO (1000) PARTITION BY RANGE (a);
CREATE TABLE test_replica_identity_part2 PARTITION OF test_replica_identity_part
  FOR VALUES FROM (1000) TO (2000);
CREATE TABLE test_replica_identity_part11 PARTITION OF test_replica_identity_part1
  FOR VALUES FROM (1000) TO (1500);
ALTER TABLE test_replica_identity_part REPLICA IDENTITY FULL;
CREATE TABLE test_replica_identity_part3 PARTITION OF test_replica_identity_part
  FOR VALUES FROM (2000) TO (3000);
CREATE TABLE test_replica_identity_part4 (LIKE test_replica_identity_part);
ALTER TABLE test_replica_identity_part ATTACH PARTITION test_replica_identity_part4
  FOR VALUES FROM (3000) TO (4000);
\d+ test_replica_identity_part2
                        Table "public.test_replica_identity_part2"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition of: test_replica_identity_part FOR VALUES FROM (1000) TO (2000)
Partition constraint: ((a IS NOT NULL) AND (a >= 1000) AND (a < 2000))
Replica Identity: FULL

\d+ test_replica_identity_part11
                       Table "public.test_replica_identity_part11"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition of: test_replica_identity_part1 FOR VALUES FROM (1000) TO (1500)
Partition constraint: ((a IS NOT NULL) AND (a >= 0) AND (a < 1000) AND (a IS NOT NULL) AND (a >= 1000) AND (a < 1500))
Replica Identity: FULL

\d+ test_replica_identity_part
                  Partitioned table "public.test_replica_identity_part"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition key: RANGE (a)
Partitions: test_replica_identity_part1 FOR VALUES FROM (0) TO (1000), PARTITIONED,
            test_replica_identity_part2 FOR VALUES FROM (1000) TO (2000),
            test_replica_identity_part3 FOR VALUES FROM (2000) TO (3000),
            test_replica_identity_part4 FOR VALUES FROM (3000) TO (4000)
Replica Identity: FULL

\d+ test_replica_identity_part3
                        Table "public.test_replica_identity_part3"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition of: test_replica_identity_part FOR VALUES FROM (2000) TO (3000)
Partition constraint: ((a IS NOT NULL) AND (a >= 2000) AND (a < 3000))
Replica Identity: FULL

\d+ test_replica_identity_part4
                        Table "public.test_replica_identity_part4"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition of: test_replica_identity_part FOR VALUES FROM (3000) TO (4000)
Partition constraint: ((a IS NOT NULL) AND (a >= 3000) AND (a < 4000))
Replica Identity: FULL

ALTER TABLE test_replica_identity_part ALTER a SET NOT NULL;
CREATE UNIQUE INDEX trip_b_idx ON test_replica_identity_part (a);
ALTER TABLE test_replica_identity_part REPLICA IDENTITY USING INDEX trip_b_idx;
\d+ test_replica_identity_part2
                        Table "public.test_replica_identity_part2"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           | not null |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition of: test_replica_identity_part FOR VALUES FROM (1000) TO (2000)
Partition constraint: ((a IS NOT NULL) AND (a >= 1000) AND (a < 2000))
Indexes:
    "test_replica_identity_part2_a_idx" UNIQUE, btree (a) REPLICA IDENTITY

\d+ test_replica_identity_part11
                       Table "public.test_replica_identity_part11"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           | not null |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition of: test_replica_identity_part1 FOR VALUES FROM (1000) TO (1500)
Partition constraint: ((a IS NOT NULL) AND (a >= 0) AND (a < 1000) AND (a IS NOT NULL) AND (a >= 1000) AND (a < 1500))
Indexes:
    "test_replica_identity_part11_a_idx" UNIQUE, btree (a) REPLICA IDENTITY

\d+ test_replica_identity_part
                  Partitioned table "public.test_replica_identity_part"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           | not null |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition key: RANGE (a)
Indexes:
    "trip_b_idx" UNIQUE, btree (a) REPLICA IDENTITY
Partitions: test_replica_identity_part1 FOR VALUES FROM (0) TO (1000), PARTITIONED,
            test_replica_identity_part2 FOR VALUES FROM (1000) TO (2000),
            test_replica_identity_part3 FOR VALUES FROM (2000) TO (3000),
            test_replica_identity_part4 FOR VALUES FROM (3000) TO (4000)

\d+ test_replica_identity_part3
                        Table "public.test_replica_identity_part3"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           | not null |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition of: test_replica_identity_part FOR VALUES FROM (2000) TO (3000)
Partition constraint: ((a IS NOT NULL) AND (a >= 2000) AND (a < 3000))
Indexes:
    "test_replica_identity_part3_a_idx" UNIQUE, btree (a) REPLICA IDENTITY

\d+ test_replica_identity_part4
                        Table "public.test_replica_identity_part4"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           | not null |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition of: test_replica_identity_part FOR VALUES FROM (3000) TO (4000)
Partition constraint: ((a IS NOT NULL) AND (a >= 3000) AND (a < 4000))
Indexes:
    "test_replica_identity_part4_a_idx" UNIQUE, btree (a) REPLICA IDENTITY

----
-- Check behavior with inherited tables
----
CREATE TABLE test_replica_identity_inh (a int);
CREATE TABLE test_replica_identity_cld () INHERITS (test_replica_identity_inh);
ALTER TABLE test_replica_identity_inh REPLICA IDENTITY FULL;
CREATE TABLE test_replica_identity_cld2 () INHERITS (test_replica_identity_inh);
\d+ test_replica_identity_inh
                         Table "public.test_replica_identity_inh"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
Child tables: test_replica_identity_cld,
              test_replica_identity_cld2
Replica Identity: FULL

\d+ test_replica_identity_cld
                         Table "public.test_replica_identity_cld"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
Inherits: test_replica_identity_inh

\d+ test_replica_identity_cld2
                        Table "public.test_replica_identity_cld2"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
Inherits: test_replica_identity_inh

