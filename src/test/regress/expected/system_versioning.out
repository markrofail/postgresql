-- CREATE TABLE
-- invalid datatype
CREATE TABLE stest1 (
    a integer PRIMARY KEY,
    start_timestamp timestamp GENERATED ALWAYS AS ROW START,
    end_timestamp integer GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (start_timestamp, end_timestamp)
) WITH SYSTEM VERSIONING;
ERROR:  data type of row start time must be timestamptz
-- references to other column in period columns
CREATE TABLE stest1 (
    a integer PRIMARY KEY,
    start_timestamp timestamp with time zone GENERATED ALWAYS AS ROW START,
    end_timestamp timestamp with time zone GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (a, end_timestamp)
) WITH SYSTEM VERSIONING;
ERROR:  period start time must reference the row start time column
CREATE TABLE stest1 (
    a integer PRIMARY KEY,
    start_timestamp timestamp with time zone GENERATED ALWAYS AS ROW START,
    end_timestamp timestamp with time zone GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (start_timestamp, a)
) WITH SYSTEM VERSIONING;
ERROR:  period end time must reference the row end time column
CREATE TABLE stest1 (
    a integer PRIMARY KEY,
    start_timestamp timestamp with time zone GENERATED ALWAYS AS ROW START,
    end_timestamp timestamp with time zone GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (end_timestamp, start_timestamp)
) WITH SYSTEM VERSIONING;
ERROR:  period start time must reference the row start time column
-- duplicate system time column
CREATE TABLE stest1 (
    a integer PRIMARY KEY,
    start_timestamp timestamp with time zone GENERATED ALWAYS AS row START,
    start_timestamp1 timestamp with time zone GENERATED ALWAYS AS row START,
    end_timestamp timestamp with time zone GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (start_timestamp, end_timestamp)
) WITH SYSTEM VERSIONING;
ERROR:  row start time specified more than once
CREATE TABLE stest1 (
    a integer PRIMARY KEY,
    start_timestamp timestamp with time zone GENERATED ALWAYS AS row START,
    end_timestamp timestamp with time zone GENERATED ALWAYS AS ROW END,
    end_timestamp1 timestamp with time zone GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (start_timestamp, end_timestamp)
) WITH SYSTEM VERSIONING;
ERROR:  row end time specified more than once
-- success
CREATE TABLE stest0 (
    a integer PRIMARY KEY,
    start_timestamp timestamp with time zone GENERATED ALWAYS AS ROW START,
    end_timestamp timestamp with time zone GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (start_timestamp, end_timestamp)
) WITH SYSTEM VERSIONING;
-- default system time column usage
CREATE TABLE stest2 (
    a integer
) WITH SYSTEM VERSIONING;
\d stest2
                                       Table "public.stest2"
     Column      |           Type           | Collation | Nullable |            Default            
-----------------+--------------------------+-----------+----------+-------------------------------
 a               | integer                  |           |          | 
 start_timestamp | timestamp with time zone |           | not null | generated always as row start
 end_timestamp   | timestamp with time zone |           | not null | generated always as row end

-- ALTER TABLE tbName ADD SYSTEM VERSIONING
CREATE TABLE stest3 (
    a integer
);
\d stest3
               Table "public.stest3"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 

ALTER TABLE stest3 ADD SYSTEM VERSIONING;
\d stest3
                                       Table "public.stest3"
     Column      |           Type           | Collation | Nullable |            Default            
-----------------+--------------------------+-----------+----------+-------------------------------
 a               | integer                  |           |          | 
 start_timestamp | timestamp with time zone |           | not null | generated always as row start
 end_timestamp   | timestamp with time zone |           | not null | generated always as row end

-- ALTER TABLE tbName DROP SYSTEM VERSIONING
ALTER TABLE stest3 DROP SYSTEM VERSIONING;
\d stest3
               Table "public.stest3"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 

-- ALTER TABLE
-- Don't test DROP COLUMN at present because of klugey way we ADD SYSTEM VERSIONING
--ALTER TABLE stest0 DROP COLUMN start_timestamp;
ALTER TABLE stest0 ALTER start_timestamp DROP NOT NULL;
ERROR:  column "start_timestamp" of relation "stest0" is system time column
ALTER TABLE stest0 ALTER COLUMN start_timestamp SET DATA TYPE character;
ERROR:  column "start_timestamp" of relation "stest0" is system time column
--truncation not allowed
truncate table stest0;
ERROR:  cannot truncate table with system versioning
DROP TABLE stest2, stest3;
-- test DML
INSERT INTO stest0 VALUES (1);
INSERT INTO stest0 VALUES (2);
INSERT INTO stest0 VALUES (3);
UPDATE stest0 SET a = 4 WHERE a = 1;
DELETE FROM stest0 WHERE a = 2;
INSERT INTO stest0 VALUES (5);
-- working example
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric
) WITH SYSTEM VERSIONING;
\d products
                                      Table "public.products"
     Column      |           Type           | Collation | Nullable |            Default            
-----------------+--------------------------+-----------+----------+-------------------------------
 product_no      | integer                  |           |          | 
 name            | text                     |           |          | 
 price           | numeric                  |           |          | 
 start_timestamp | timestamp with time zone |           | not null | generated always as row start
 end_timestamp   | timestamp with time zone |           | not null | generated always as row end

-- test DML
INSERT INTO products VALUES (100, 'Washing Machine', 300.0);
INSERT INTO products VALUES (200, 'Extended Warranty', 50.0);
INSERT INTO products VALUES (300, 'Laptop', 250.0);
SELECT now() AS ts1 \gset
SELECT product_no, price FROM products ORDER BY product_no;
 product_no | price 
------------+-------
        100 | 300.0
        200 |  50.0
        300 | 250.0
(3 rows)

SELECT product_no FROM products FOR system_time FROM '-infinity' TO 'infinity' ORDER BY product_no;
 product_no 
------------
        100
        200
        300
(3 rows)

UPDATE products SET price = 75.0 WHERE product_no = 200;
UPDATE products SET price = 350.0 WHERE product_no = 300;
UPDATE products SET product_no = 400 WHERE product_no = 100;
SELECT now() AS ts2 \gset
SELECT product_no, price FROM products ORDER BY product_no;
 product_no | price 
------------+-------
        200 |  75.0
        300 | 350.0
        400 | 300.0
(3 rows)

SELECT product_no FROM products FOR system_time FROM '-infinity' TO 'infinity' ORDER BY product_no;
 product_no 
------------
        100
        200
        200
        300
        300
        400
(6 rows)

DELETE FROM products WHERE product_no = 300;
SELECT now() AS ts3 \gset
SELECT product_no, price FROM products ORDER BY product_no;
 product_no | price 
------------+-------
        200 |  75.0
        400 | 300.0
(2 rows)

SELECT product_no FROM products FOR system_time FROM '-infinity' TO 'infinity' ORDER BY product_no;
 product_no 
------------
        100
        200
        200
        300
        300
        400
(6 rows)

INSERT INTO products VALUES (500, 'Spare Parts', 25.0);
SELECT product_no, price FROM products ORDER BY product_no;
 product_no | price 
------------+-------
        200 |  75.0
        400 | 300.0
        500 |  25.0
(3 rows)

SELECT product_no FROM products FOR system_time FROM '-infinity' TO 'infinity' ORDER BY product_no;
 product_no 
------------
        100
        200
        200
        300
        300
        400
        500
(7 rows)

-- cannot update system versioning timestamps
UPDATE products SET start_timestamp = now();
ERROR:  column "start_timestamp" can only be updated to DEFAULT
DETAIL:  Column "start_timestamp" is a generated column.
-- these should fail... but currently succeed
--UPDATE products SET start_timestamp = default;
--UPDATE products SET end_timestamp = default;
/*
 * Temporal Queries
 */
-- AS OF ...
SELECT product_no, price FROM products
FOR system_time AS OF :'ts1'
ORDER BY product_no, start_timestamp;
 product_no | price 
------------+-------
        100 | 300.0
        200 |  50.0
        300 | 250.0
(3 rows)

SELECT product_no, price FROM products
FOR system_time AS OF :'ts2'
ORDER BY product_no, start_timestamp;
 product_no | price 
------------+-------
        200 |  75.0
        300 | 350.0
        400 | 300.0
(3 rows)

SELECT product_no, price FROM products
FOR system_time AS OF :'ts3'
ORDER BY product_no, start_timestamp;
 product_no | price 
------------+-------
        200 |  75.0
        400 | 300.0
(2 rows)

-- BETWEEN ... AND ...
SELECT product_no, price FROM products
FOR system_time BETWEEN :'ts1' AND :'ts2'
ORDER BY product_no, start_timestamp;
 product_no | price 
------------+-------
        100 | 300.0
        200 |  50.0
        200 |  75.0
        300 | 250.0
        300 | 350.0
        400 | 300.0
(6 rows)

SELECT product_no, price FROM products
FOR system_time BETWEEN :'ts1' AND :'ts3'
ORDER BY product_no, start_timestamp;
 product_no | price 
------------+-------
        100 | 300.0
        200 |  50.0
        200 |  75.0
        300 | 250.0
        300 | 350.0
        400 | 300.0
(6 rows)

SELECT product_no, price FROM products
FOR system_time BETWEEN :'ts1' AND :'ts3'
ORDER BY product_no, start_timestamp;
 product_no | price 
------------+-------
        100 | 300.0
        200 |  50.0
        200 |  75.0
        300 | 250.0
        300 | 350.0
        400 | 300.0
(6 rows)

/*
 * JOINS
 */
CREATE TABLE stestx (x int, y int);
INSERT INTO stestx VALUES (11, 1), (22, 2), (33, 3);
SELECT a, x, y
FROM stestx
INNER JOIN stest0 ON stestx.y = stest0.a;
 a | x  | y 
---+----+---
 3 | 33 | 3
(1 row)

SELECT a, x, y
FROM stestx
LEFT OUTER JOIN stest0 ON stestx.y = stest0.a;
 a | x  | y 
---+----+---
   | 11 | 1
   | 22 | 2
 3 | 33 | 3
(3 rows)

SELECT a, x, y
FROM stestx
RIGHT OUTER JOIN stest0 ON stestx.y = stest0.a;
 a | x  | y 
---+----+---
 3 | 33 | 3
 4 |    |  
 5 |    |  
(3 rows)

SELECT a, x, y
FROM stestx
FULL OUTER JOIN stest0 ON stestx.y = stest0.a;
 a | x  | y 
---+----+---
   | 11 | 1
   | 22 | 2
 3 | 33 | 3
 4 |    |  
 5 |    |  
(5 rows)

DROP TABLE stestx;
-- views
CREATE VIEW stest1v AS SELECT a FROM stest0;
CREATE VIEW stest2v AS select a from stest0 for system_time from '2000-01-01 00:00:00.00000' to 'infinity' ORDER BY a;
SELECT * FROM stest1v;
 a 
---
 3
 4
 5
(3 rows)

SELECT * FROM stest2v;
 a 
---
 1
 2
 3
 4
 5
(5 rows)

DROP VIEW stest1v;
DROP VIEW stest2v;
-- CTEs
WITH foo AS (SELECT a FROM stest0) SELECT * FROM foo;
 a 
---
 3
 4
 5
(3 rows)

WITH foo AS (select a from stest0 for system_time from '2000-01-01 00:00:00.00000' to 'infinity' ORDER BY a) SELECT * FROM foo;
 a 
---
 1
 2
 3
 4
 5
(5 rows)

-- inheritance
CREATE TABLE stest1 () INHERITS (stest0);
SELECT * FROM stest1;
 a | start_timestamp | end_timestamp 
---+-----------------+---------------
(0 rows)

\d stest1
                                       Table "public.stest1"
     Column      |           Type           | Collation | Nullable |            Default            
-----------------+--------------------------+-----------+----------+-------------------------------
 a               | integer                  |           | not null | 
 start_timestamp | timestamp with time zone |           | not null | generated always as row start
 end_timestamp   | timestamp with time zone |           | not null | generated always as row end
Inherits: stest0

INSERT INTO stest1 VALUES (4);
SELECT a FROM stest1;
 a 
---
 4
(1 row)

DROP TABLE stest0, stest1;
