--
-- CONSTRAINTS
-- Constraints can be specified with:
--  - DEFAULT clause
--  - CHECK clauses
--  - PRIMARY KEY clauses
--  - UNIQUE clauses
--  - EXCLUDE clauses
--

--
-- DEFAULT syntax
--

CREATE TABLE DEFAULT_TBL (i int DEFAULT 100,
	x text DEFAULT 'vadim', f float8 DEFAULT 123.456);

INSERT INTO DEFAULT_TBL VALUES (1, 'thomas', 57.0613);
INSERT INTO DEFAULT_TBL VALUES (1, 'bruce');
INSERT INTO DEFAULT_TBL (i, f) VALUES (2, 987.654);
INSERT INTO DEFAULT_TBL (x) VALUES ('marc');
INSERT INTO DEFAULT_TBL VALUES (3, null, 1.0);

SELECT '' AS five, * FROM DEFAULT_TBL;

CREATE SEQUENCE DEFAULT_SEQ;

CREATE TABLE DEFAULTEXPR_TBL (i1 int DEFAULT 100 + (200-199) * 2,
	i2 int DEFAULT nextval('default_seq'));

INSERT INTO DEFAULTEXPR_TBL VALUES (-1, -2);
INSERT INTO DEFAULTEXPR_TBL (i1) VALUES (-3);
INSERT INTO DEFAULTEXPR_TBL (i2) VALUES (-4);
INSERT INTO DEFAULTEXPR_TBL (i2) VALUES (NULL);

SELECT '' AS four, * FROM DEFAULTEXPR_TBL;

-- syntax errors
--  test for extraneous comma
CREATE TABLE error_tbl (i int DEFAULT (100, ));
--  this will fail because gram.y uses b_expr not a_expr for defaults,
--  to avoid a shift/reduce conflict that arises from NOT NULL being
--  part of the column definition syntax:
CREATE TABLE error_tbl (b1 bool DEFAULT 1 IN (1, 2));
--  this should work, however:
CREATE TABLE error_tbl (b1 bool DEFAULT (1 IN (1, 2)));

DROP TABLE error_tbl;

--
-- CHECK syntax
--

CREATE TABLE CHECK_TBL (x int,
	CONSTRAINT CHECK_CON CHECK (x > 3));

INSERT INTO CHECK_TBL VALUES (5);
INSERT INTO CHECK_TBL VALUES (4);
INSERT INTO CHECK_TBL VALUES (3);
INSERT INTO CHECK_TBL VALUES (2);
INSERT INTO CHECK_TBL VALUES (6);
INSERT INTO CHECK_TBL VALUES (1);

SELECT '' AS three, * FROM CHECK_TBL;

CREATE SEQUENCE CHECK_SEQ;

CREATE TABLE CHECK2_TBL (x int, y text, z int,
	CONSTRAINT SEQUENCE_CON
	CHECK (x > 3 and y <> 'check failed' and z < 8));

INSERT INTO CHECK2_TBL VALUES (4, 'check ok', -2);
INSERT INTO CHECK2_TBL VALUES (1, 'x check failed', -2);
INSERT INTO CHECK2_TBL VALUES (5, 'z check failed', 10);
INSERT INTO CHECK2_TBL VALUES (0, 'check failed', -2);
INSERT INTO CHECK2_TBL VALUES (6, 'check failed', 11);
INSERT INTO CHECK2_TBL VALUES (7, 'check ok', 7);

SELECT '' AS two, * from CHECK2_TBL;

--
-- Check constraints on INSERT
--

CREATE SEQUENCE INSERT_SEQ;

CREATE TABLE INSERT_TBL (x INT DEFAULT nextval('insert_seq'),
	y TEXT DEFAULT '-NULL-',
	z INT DEFAULT -1 * currval('insert_seq'),
	CONSTRAINT INSERT_TBL_CON CHECK (x >= 3 AND y <> 'check failed' AND x < 8),
	CHECK (x + z = 0));

INSERT INTO INSERT_TBL(x,z) VALUES (2, -2);

SELECT '' AS zero, * FROM INSERT_TBL;

SELECT 'one' AS one, nextval('insert_seq');

INSERT INTO INSERT_TBL(y) VALUES ('Y');
INSERT INTO INSERT_TBL(y) VALUES ('Y');
INSERT INTO INSERT_TBL(x,z) VALUES (1, -2);
INSERT INTO INSERT_TBL(z,x) VALUES (-7,  7);
INSERT INTO INSERT_TBL VALUES (5, 'check failed', -5);
INSERT INTO INSERT_TBL VALUES (7, '!check failed', -7);
INSERT INTO INSERT_TBL(y) VALUES ('-!NULL-');

SELECT '' AS four, * FROM INSERT_TBL;

INSERT INTO INSERT_TBL(y,z) VALUES ('check failed', 4);
INSERT INTO INSERT_TBL(x,y) VALUES (5, 'check failed');
INSERT INTO INSERT_TBL(x,y) VALUES (5, '!check failed');
INSERT INTO INSERT_TBL(y) VALUES ('-!NULL-');

SELECT '' AS six, * FROM INSERT_TBL;

SELECT 'seven' AS one, nextval('insert_seq');

INSERT INTO INSERT_TBL(y) VALUES ('Y');

SELECT 'eight' AS one, currval('insert_seq');

-- According to SQL, it is OK to insert a record that gives rise to NULL
-- constraint-condition results.  Postgres used to reject this, but it
-- was wrong:
INSERT INTO INSERT_TBL VALUES (null, null, null);

SELECT '' AS nine, * FROM INSERT_TBL;

--
-- Check constraints on system columns
--

CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool,
                  altitude int,
                  CHECK (NOT (is_capital AND tableoid::regclass::text = 'sys_col_check_tbl')));

INSERT INTO SYS_COL_CHECK_TBL VALUES ('Seattle', 'Washington', false, 100);
INSERT INTO SYS_COL_CHECK_TBL VALUES ('Olympia', 'Washington', true, 100);

SELECT *, tableoid::regclass::text FROM SYS_COL_CHECK_TBL;

DROP TABLE SYS_COL_CHECK_TBL;

--
-- Check constraints on system columns other then TableOid should return error
--
CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool,
                  altitude int,
				  CHECK (NOT (is_capital AND ctid::text = 'sys_col_check_tbl')));

--
-- Check inheritance of defaults and constraints
--

CREATE TABLE INSERT_CHILD (cx INT default 42,
	cy INT CHECK (cy > x))
	INHERITS (INSERT_TBL);

INSERT INTO INSERT_CHILD(x,z,cy) VALUES (7,-7,11);
INSERT INTO INSERT_CHILD(x,z,cy) VALUES (7,-7,6);
INSERT INTO INSERT_CHILD(x,z,cy) VALUES (6,-7,7);
INSERT INTO INSERT_CHILD(x,y,z,cy) VALUES (6,'check failed',-6,7);

SELECT * FROM INSERT_CHILD;

DROP TABLE INSERT_CHILD;

--
-- Check NO INHERIT type of constraints and inheritance
--

CREATE TABLE ATACC1 (TEST INT
	CHECK (TEST > 0) NO INHERIT);

CREATE TABLE ATACC2 (TEST2 INT) INHERITS (ATACC1);
-- check constraint is not there on child
INSERT INTO ATACC2 (TEST) VALUES (-3);
-- check constraint is there on parent
INSERT INTO ATACC1 (TEST) VALUES (-3);
DROP TABLE ATACC1 CASCADE;

CREATE TABLE ATACC1 (TEST INT, TEST2 INT
	CHECK (TEST > 0), CHECK (TEST2 > 10) NO INHERIT);

CREATE TABLE ATACC2 () INHERITS (ATACC1);
-- check constraint is there on child
INSERT INTO ATACC2 (TEST) VALUES (-3);
-- check constraint is there on parent
INSERT INTO ATACC1 (TEST) VALUES (-3);
-- check constraint is not there on child
INSERT INTO ATACC2 (TEST2) VALUES (3);
-- check constraint is there on parent
INSERT INTO ATACC1 (TEST2) VALUES (3);
DROP TABLE ATACC1 CASCADE;

--
-- Check constraints on INSERT INTO
--

DELETE FROM INSERT_TBL;

ALTER SEQUENCE INSERT_SEQ RESTART WITH 4;

CREATE TEMP TABLE tmp (xd INT, yd TEXT, zd INT);

INSERT INTO tmp VALUES (null, 'Y', null);
INSERT INTO tmp VALUES (5, '!check failed', null);
INSERT INTO tmp VALUES (null, 'try again', null);
INSERT INTO INSERT_TBL(y) select yd from tmp;

SELECT '' AS three, * FROM INSERT_TBL;

INSERT INTO INSERT_TBL SELECT * FROM tmp WHERE yd = 'try again';
INSERT INTO INSERT_TBL(y,z) SELECT yd, -7 FROM tmp WHERE yd = 'try again';
INSERT INTO INSERT_TBL(y,z) SELECT yd, -8 FROM tmp WHERE yd = 'try again';

SELECT '' AS four, * FROM INSERT_TBL;

DROP TABLE tmp;

--
-- Check constraints on UPDATE
--

UPDATE INSERT_TBL SET x = NULL WHERE x = 5;
UPDATE INSERT_TBL SET x = 6 WHERE x = 6;
UPDATE INSERT_TBL SET x = -z, z = -x;
UPDATE INSERT_TBL SET x = z, z = x;

SELECT * FROM INSERT_TBL;

-- DROP TABLE INSERT_TBL;

--
-- Check constraints on COPY FROM
--

CREATE TABLE COPY_TBL (x INT, y TEXT, z INT,
	CONSTRAINT COPY_CON
	CHECK (x > 3 AND y <> 'check failed' AND x < 7 ));

COPY COPY_TBL FROM '@abs_srcdir@/data/constro.data';

SELECT '' AS two, * FROM COPY_TBL;

COPY COPY_TBL FROM '@abs_srcdir@/data/constrf.data';

SELECT * FROM COPY_TBL;

--
-- Primary keys
--

CREATE TABLE PRIMARY_TBL (i int PRIMARY KEY, t text);

INSERT INTO PRIMARY_TBL VALUES (1, 'one');
INSERT INTO PRIMARY_TBL VALUES (2, 'two');
INSERT INTO PRIMARY_TBL VALUES (1, 'three');
INSERT INTO PRIMARY_TBL VALUES (4, 'three');
INSERT INTO PRIMARY_TBL VALUES (5, 'one');
INSERT INTO PRIMARY_TBL (t) VALUES ('six');

SELECT '' AS four, * FROM PRIMARY_TBL;

DROP TABLE PRIMARY_TBL;

CREATE TABLE PRIMARY_TBL (i int, t text,
	PRIMARY KEY(i,t));

INSERT INTO PRIMARY_TBL VALUES (1, 'one');
INSERT INTO PRIMARY_TBL VALUES (2, 'two');
INSERT INTO PRIMARY_TBL VALUES (1, 'three');
INSERT INTO PRIMARY_TBL VALUES (4, 'three');
INSERT INTO PRIMARY_TBL VALUES (5, 'one');
INSERT INTO PRIMARY_TBL (t) VALUES ('six');

SELECT '' AS three, * FROM PRIMARY_TBL;

DROP TABLE PRIMARY_TBL;

--
-- Unique keys
--

CREATE TABLE UNIQUE_TBL (i int UNIQUE, t text);

INSERT INTO UNIQUE_TBL VALUES (1, 'one');
INSERT INTO UNIQUE_TBL VALUES (2, 'two');
INSERT INTO UNIQUE_TBL VALUES (1, 'three');
INSERT INTO UNIQUE_TBL VALUES (4, 'four');
INSERT INTO UNIQUE_TBL VALUES (5, 'one');
INSERT INTO UNIQUE_TBL (t) VALUES ('six');
INSERT INTO UNIQUE_TBL (t) VALUES ('seven');

INSERT INTO UNIQUE_TBL VALUES (5, 'five-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'five-upsert-update';
INSERT INTO UNIQUE_TBL VALUES (6, 'six-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'six-upsert-update';
-- should fail
INSERT INTO UNIQUE_TBL VALUES (1, 'a'), (2, 'b'), (2, 'b') ON CONFLICT (i) DO UPDATE SET t = 'fails';

SELECT '' AS five, * FROM UNIQUE_TBL;

DROP TABLE UNIQUE_TBL;

CREATE TABLE UNIQUE_TBL (i int, t text,
	UNIQUE(i,t));

INSERT INTO UNIQUE_TBL VALUES (1, 'one');
INSERT INTO UNIQUE_TBL VALUES (2, 'two');
INSERT INTO UNIQUE_TBL VALUES (1, 'three');
INSERT INTO UNIQUE_TBL VALUES (1, 'one');
INSERT INTO UNIQUE_TBL VALUES (5, 'one');
INSERT INTO UNIQUE_TBL (t) VALUES ('six');

SELECT '' AS five, * FROM UNIQUE_TBL;

DROP TABLE UNIQUE_TBL;

--
-- Deferrable unique constraints
--

CREATE TABLE unique_tbl (i int UNIQUE DEFERRABLE, t text);

INSERT INTO unique_tbl VALUES (0, 'one');
INSERT INTO unique_tbl VALUES (1, 'two');
INSERT INTO unique_tbl VALUES (2, 'tree');
INSERT INTO unique_tbl VALUES (3, 'four');
INSERT INTO unique_tbl VALUES (4, 'five');

BEGIN;

-- default is immediate so this should fail right away
UPDATE unique_tbl SET i = 1 WHERE i = 0;

ROLLBACK;

-- check is done at end of statement, so this should succeed
UPDATE unique_tbl SET i = i+1;

SELECT * FROM unique_tbl;

-- explicitly defer the constraint
BEGIN;

SET CONSTRAINTS unique_tbl_i_key DEFERRED;

INSERT INTO unique_tbl VALUES (3, 'three');
DELETE FROM unique_tbl WHERE t = 'tree'; -- makes constraint valid again

COMMIT; -- should succeed

SELECT * FROM unique_tbl;

-- try adding an initially deferred constraint
ALTER TABLE unique_tbl DROP CONSTRAINT unique_tbl_i_key;
ALTER TABLE unique_tbl ADD CONSTRAINT unique_tbl_i_key
	UNIQUE (i) DEFERRABLE INITIALLY DEFERRED;

BEGIN;

INSERT INTO unique_tbl VALUES (1, 'five');
INSERT INTO unique_tbl VALUES (5, 'one');
UPDATE unique_tbl SET i = 4 WHERE i = 2;
UPDATE unique_tbl SET i = 2 WHERE i = 4 AND t = 'four';
DELETE FROM unique_tbl WHERE i = 1 AND t = 'one';
DELETE FROM unique_tbl WHERE i = 5 AND t = 'five';

COMMIT;

SELECT * FROM unique_tbl;

-- should fail at commit-time
BEGIN;
INSERT INTO unique_tbl VALUES (3, 'Three'); -- should succeed for now
COMMIT; -- should fail

-- make constraint check immediate
BEGIN;

SET CONSTRAINTS ALL IMMEDIATE;

INSERT INTO unique_tbl VALUES (3, 'Three'); -- should fail

COMMIT;

-- forced check when SET CONSTRAINTS is called
BEGIN;

SET CONSTRAINTS ALL DEFERRED;

INSERT INTO unique_tbl VALUES (3, 'Three'); -- should succeed for now

SET CONSTRAINTS ALL IMMEDIATE; -- should fail

COMMIT;

-- test deferrable UNIQUE with a partitioned table
CREATE TABLE parted_uniq_tbl (i int UNIQUE DEFERRABLE) partition by range (i);
CREATE TABLE parted_uniq_tbl_1 PARTITION OF parted_uniq_tbl FOR VALUES FROM (0) TO (10);
CREATE TABLE parted_uniq_tbl_2 PARTITION OF parted_uniq_tbl FOR VALUES FROM (20) TO (30);
SELECT conname, conrelid::regclass FROM pg_constraint
  WHERE conname LIKE 'parted_uniq%' ORDER BY conname;
BEGIN;
INSERT INTO parted_uniq_tbl VALUES (1);
SAVEPOINT f;
INSERT INTO parted_uniq_tbl VALUES (1);	-- unique violation
ROLLBACK TO f;
SET CONSTRAINTS parted_uniq_tbl_i_key DEFERRED;
INSERT INTO parted_uniq_tbl VALUES (1);	-- OK now, fail at commit
COMMIT;
DROP TABLE parted_uniq_tbl;

-- test a HOT update that invalidates the conflicting tuple.
-- the trigger should still fire and catch the violation

BEGIN;

INSERT INTO unique_tbl VALUES (3, 'Three'); -- should succeed for now
UPDATE unique_tbl SET t = 'THREE' WHERE i = 3 AND t = 'Three';

COMMIT; -- should fail

SELECT * FROM unique_tbl;

-- test a HOT update that modifies the newly inserted tuple,
-- but should succeed because we then remove the other conflicting tuple.

BEGIN;

INSERT INTO unique_tbl VALUES(3, 'tree'); -- should succeed for now
UPDATE unique_tbl SET t = 'threex' WHERE t = 'tree';
DELETE FROM unique_tbl WHERE t = 'three';

SELECT * FROM unique_tbl;

COMMIT;

SELECT * FROM unique_tbl;

DROP TABLE unique_tbl;

--
-- EXCLUDE constraints
--

CREATE TABLE circles (
  c1 CIRCLE,
  c2 TEXT,
  EXCLUDE USING gist
    (c1 WITH &&, (c2::circle) WITH &&)
    WHERE (circle_center(c1) <> '(0,0)')
);

-- these should succeed because they don't match the index predicate
INSERT INTO circles VALUES('<(0,0), 5>', '<(0,0), 5>');
INSERT INTO circles VALUES('<(0,0), 5>', '<(0,0), 4>');

-- succeed
INSERT INTO circles VALUES('<(10,10), 10>', '<(0,0), 5>');
-- fail, overlaps
INSERT INTO circles VALUES('<(20,20), 10>', '<(0,0), 4>');
-- succeed, because violation is ignored
INSERT INTO circles VALUES('<(20,20), 10>', '<(0,0), 4>')
  ON CONFLICT ON CONSTRAINT circles_c1_c2_excl DO NOTHING;
-- fail, because DO UPDATE variant requires unique index
INSERT INTO circles VALUES('<(20,20), 10>', '<(0,0), 4>')
  ON CONFLICT ON CONSTRAINT circles_c1_c2_excl DO UPDATE SET c2 = EXCLUDED.c2;
-- succeed because c1 doesn't overlap
INSERT INTO circles VALUES('<(20,20), 1>', '<(0,0), 5>');
-- succeed because c2 doesn't overlap
INSERT INTO circles VALUES('<(20,20), 10>', '<(10,10), 5>');

-- should fail on existing data without the WHERE clause
ALTER TABLE circles ADD EXCLUDE USING gist
  (c1 WITH &&, (c2::circle) WITH &&);

-- try reindexing an existing constraint
REINDEX INDEX circles_c1_c2_excl;

DROP TABLE circles;

-- Check deferred exclusion constraint

CREATE TABLE deferred_excl (
  f1 int,
  f2 int,
  CONSTRAINT deferred_excl_con EXCLUDE (f1 WITH =) INITIALLY DEFERRED
);

INSERT INTO deferred_excl VALUES(1);
INSERT INTO deferred_excl VALUES(2);
INSERT INTO deferred_excl VALUES(1); -- fail
INSERT INTO deferred_excl VALUES(1) ON CONFLICT ON CONSTRAINT deferred_excl_con DO NOTHING; -- fail
BEGIN;
INSERT INTO deferred_excl VALUES(2); -- no fail here
COMMIT; -- should fail here
BEGIN;
INSERT INTO deferred_excl VALUES(3);
INSERT INTO deferred_excl VALUES(3); -- no fail here
COMMIT; -- should fail here

-- bug #13148: deferred constraint versus HOT update
BEGIN;
INSERT INTO deferred_excl VALUES(2, 1); -- no fail here
DELETE FROM deferred_excl WHERE f1 = 2 AND f2 IS NULL; -- remove old row
UPDATE deferred_excl SET f2 = 2 WHERE f1 = 2;
COMMIT; -- should not fail

SELECT * FROM deferred_excl;

ALTER TABLE deferred_excl DROP CONSTRAINT deferred_excl_con;

-- This should fail, but worth testing because of HOT updates
UPDATE deferred_excl SET f1 = 3;

ALTER TABLE deferred_excl ADD EXCLUDE (f1 WITH =);

DROP TABLE deferred_excl;

-- Comments
-- Setup a low-level role to enforce non-superuser checks.
CREATE ROLE regress_constraint_comments;
SET SESSION AUTHORIZATION regress_constraint_comments;

CREATE TABLE constraint_comments_tbl (a int CONSTRAINT the_constraint CHECK (a > 0));
CREATE DOMAIN constraint_comments_dom AS int CONSTRAINT the_constraint CHECK (value > 0);

COMMENT ON CONSTRAINT the_constraint ON constraint_comments_tbl IS 'yes, the comment';
COMMENT ON CONSTRAINT the_constraint ON DOMAIN constraint_comments_dom IS 'yes, another comment';

-- no such constraint
COMMENT ON CONSTRAINT no_constraint ON constraint_comments_tbl IS 'yes, the comment';
COMMENT ON CONSTRAINT no_constraint ON DOMAIN constraint_comments_dom IS 'yes, another comment';

-- no such table/domain
COMMENT ON CONSTRAINT the_constraint ON no_comments_tbl IS 'bad comment';
COMMENT ON CONSTRAINT the_constraint ON DOMAIN no_comments_dom IS 'another bad comment';

COMMENT ON CONSTRAINT the_constraint ON constraint_comments_tbl IS NULL;
COMMENT ON CONSTRAINT the_constraint ON DOMAIN constraint_comments_dom IS NULL;

-- unauthorized user
RESET SESSION AUTHORIZATION;
CREATE ROLE regress_constraint_comments_noaccess;
SET SESSION AUTHORIZATION regress_constraint_comments_noaccess;
COMMENT ON CONSTRAINT the_constraint ON constraint_comments_tbl IS 'no, the comment';
COMMENT ON CONSTRAINT the_constraint ON DOMAIN constraint_comments_dom IS 'no, another comment';
RESET SESSION AUTHORIZATION;

DROP TABLE constraint_comments_tbl;
DROP DOMAIN constraint_comments_dom;

DROP ROLE regress_constraint_comments;
DROP ROLE regress_constraint_comments_noaccess;

--
--
--
-- ALTER CONSTRAINT ... USING INDEX
--
--
--

CREATE FUNCTION show_some_indexes_from_relation(
	searched_relname name,
	searched_indnames name[]
)
RETURNS TABLE
(
	relname name,
	indname name,
	index_relkind "char",
	index_relispartition boolean,
	indisunique boolean,
	indisprimary boolean,
	indisexclusion boolean,
	indkey int2vector,
	indislive boolean,
	indisvalid boolean,
	indisready boolean,
	indoption int2vector,
	indcollation oidvector,
	indimmediate boolean,
	indisreplident boolean,
	depends_on_table boolean,
	depends_on_simple_columns boolean,
	depends_on_constraint boolean,
	conname name
)
AS $$
	SELECT r.relname, i.relname, i.relkind, i.relispartition, indisunique,
		   indisprimary, indisexclusion, indkey, indislive, indisvalid,
		   indisready, indoption, indcollation, indimmediate, indisreplident,
		   EXISTS(SELECT *
				  FROM pg_depend
				  WHERE classid = 'pg_class'::regclass AND
						objid = indexrelid AND
						refclassid = 'pg_class'::regclass AND
						refobjid = indrelid AND
						refobjsubid = 0),
		   EXISTS(SELECT *
				  FROM pg_depend
				  WHERE classid = 'pg_class'::regclass AND
						objid = indexrelid AND
						refclassid = 'pg_class'::regclass AND
						refobjid = indrelid AND
						refobjsubid != 0),
		   EXISTS(SELECT *
				  FROM pg_depend
				  WHERE classid = 'pg_class'::regclass AND
						objid = indexrelid AND
						refclassid = 'pg_constraint'::regclass AND
						refobjid = c.oid),
		   conname
	FROM pg_index
	JOIN pg_class i ON indexrelid = i.oid
	JOIN pg_class r ON indrelid = r.oid
	LEFT JOIN pg_constraint c ON indexrelid = c.conindid
	WHERE r.relname = searched_relname AND
		  (searched_indnames IS NULL OR i.relname = ANY (searched_indnames))
	ORDER BY indkey, i.relname;
$$ LANGUAGE SQL;
--
CREATE FUNCTION show_indexes_from_relation(searched_relname name)
RETURNS TABLE
(
	relname name,
	indname name,
	index_relkind "char",
	index_relispartition boolean,
	indisunique boolean,
	indisprimary boolean,
	indisexclusion boolean,
	indkey int2vector,
	indislive boolean,
	indisvalid boolean,
	indisready boolean,
	indoption int2vector,
	indcollation oidvector,
	indimmediate boolean,
	indisreplident boolean,
	depends_on_table boolean,
	depends_on_simple_columns boolean,
	depends_on_constraint boolean,
	conname name
)
AS $$
	SELECT * FROM show_some_indexes_from_relation(searched_relname, NULL);
$$ LANGUAGE SQL;
--
CREATE FUNCTION show_some_index_exprs_pred(
	searched_relname name,
	searched_indnames name[]
)
RETURNS TABLE
(
	relname name,
	indname name,
	indpred text,
	indexprs text
)
AS $$
	SELECT
		r.relname,
		i.relname,
		pg_get_expr(indpred, indrelid, true),
		pg_get_expr(indexprs, indrelid, true)
	FROM pg_index
	JOIN pg_class i ON indexrelid = i.oid
	JOIN pg_class r ON indrelid = r.oid
	WHERE r.relname = searched_relname AND
		  (searched_indnames IS NULL OR i.relname = ANY (searched_indnames))
	ORDER BY indexprs, indpred, indkey, i.relname;
$$ LANGUAGE SQL;
--
CREATE FUNCTION show_index_exprs_pred(searched_relname name)
RETURNS TABLE
(
	relname name,
	indname name,
	indpred text,
	indexprs text
)
AS $$
	SELECT * FROM show_some_index_exprs_pred(searched_relname, NULL);
$$ LANGUAGE SQL;
--
CREATE FUNCTION show_constraints_named_like(searched_conname name)
RETURNS TABLE
(
	conname name,
	contype "char",
	conkey smallint[],
	condeferrable boolean
)
AS $$
	SELECT conname, contype, conkey, condeferrable
	FROM pg_constraint
	WHERE conname LIKE searched_conname
	ORDER BY conkey, conname;
$$ LANGUAGE SQL;
--
CREATE FUNCTION show_index_dependencies_on_table_columns
(
	searched_indnames name[]
)
RETURNS TABLE
(
	indname name,
	indnatts smallint,
	indnkeyatts smallint,
	indkey int2vector,
	attnum smallint,
	attname name
)
AS $$
	SELECT relname, indnatts, indnkeyatts, indkey, attnum, attname
	FROM pg_index
	JOIN pg_class ON indexrelid = pg_class.oid
	JOIN pg_depend ON indexrelid = objid
	JOIN pg_attribute ON attrelid = indrelid
	WHERE relname = ANY (searched_indnames) AND
		  classid = 'pg_class'::regclass AND
		  refclassid = 'pg_class'::regclass AND
		  refobjid = indrelid AND
		  refobjsubid != 0 AND
		  refobjsubid = attnum
	ORDER BY relname, refobjsubid;
$$ LANGUAGE SQL;
--
CREATE FUNCTION show_alteridx_index_dependencies()
RETURNS TABLE
(
	indname name,
	referenced_indname name
)
AS $$
	SELECT c.relname, ref_c.relname
	FROM
		pg_index AS i
		JOIN pg_class AS c ON c.oid = i.indexrelid
		JOIN pg_depend ON objid = i.indexrelid
		JOIN pg_index AS ref_i ON refobjid = ref_i.indexrelid
		JOIN pg_class AS ref_c ON ref_c.oid = ref_i.indexrelid
	WHERE classid = 'pg_class'::regclass
		AND refclassid = 'pg_class'::regclass
		AND c.relname like '%alteridx%'
	ORDER BY c.relname, ref_c.relname;
$$ LANGUAGE SQL;
--
CREATE FUNCTION show_alteridx_constraint_dependencies()
RETURNS TABLE
(
	conname name,
	referenced_conname name
)
AS $$
	SELECT con.conname, ref_con.conname
	FROM
		pg_constraint AS con
		JOIN pg_depend ON objid = con.oid
		JOIN pg_constraint AS ref_con ON refobjid = ref_con.oid
	WHERE
		classid = 'pg_constraint'::regclass AND
		refclassid = 'pg_constraint'::regclass AND
		con.conname like '%alteridx%'
	ORDER BY con.conname, ref_con.conname;
$$ LANGUAGE SQL;
--
--
--
CREATE TABLE alteridx_orig(
id int PRIMARY KEY,
uniq int CONSTRAINT alteridx_orig_uniq_key UNIQUE NOT NULL,
parity int,
msg text UNIQUE,
ir int4range,
partition_key int,
EXCLUDE using gist(ir with &&),
EXCLUDE USING btree((id + uniq) WITH =) WHERE (id > 2),
EXCLUDE ((id + uniq) WITH =) WHERE (parity < 4),
CONSTRAINT alteridx_orig_double UNIQUE(id, uniq),
CONSTRAINT alteridx_id_key_deferrable UNIQUE (id) DEFERRABLE,
CHECK (parity > -10));

CREATE TABLE partitioned_orig_alteridx(
id int,
uniq int,
parity int,
msg text,
ir int4range,
partition_key int UNIQUE,
UNIQUE (partition_key, id))
PARTITION BY RANGE (partition_key);

ALTER TABLE partitioned_orig_alteridx ATTACH PARTITION alteridx_orig
FOR VALUES FROM (0) TO (20);
--
--
CREATE TABLE another_alteridx(
id int PRIMARY KEY,
uniq int UNIQUE,
parity int,
msg text,
ir int4range,
EXCLUDE USING gist(ir with &&),
EXCLUDE USING btree((id + 4) WITH =));
--
--
CREATE TABLE third_alteridx(
	id1 int,
	id2 int,
	PRIMARY KEY (id1, id2)
);
--
--
SELECT * FROM show_indexes_from_relation('alteridx_orig');
SELECT * FROM show_index_exprs_pred('alteridx_orig');
SELECT * FROM show_constraints_named_like('alteridx_%');

SELECT * FROM show_indexes_from_relation('partitioned_orig_alteridx');
SELECT * FROM show_constraints_named_like('partitioned_%');

SELECT * FROM show_indexes_from_relation('another_alteridx');
SELECT * FROM show_constraints_named_like('another_%');
--
--
-- Checking that constraints work before index replacement
--
--
INSERT INTO alteridx_orig SELECT n, n, n%2, CHR(62+n) || CHR(63+n),
int4range(2*n,2*n+1), n from generate_series(1,10) as gs(n);
INSERT INTO another_alteridx SELECT n, n, n%2, CHR(62+n) || CHR(63+n),
int4range(2*n,2*n+1) from generate_series(1,10) as gs(n);
--
INSERT INTO alteridx_orig VALUES(1, 0, 1, 'AA', int4range(102, 103), 15); -- failure here
INSERT INTO alteridx_orig VALUES(0, 1, 1, 'AA', int4range(104, 105), 15); -- failure here
INSERT INTO alteridx_orig VALUES(0, 0, 1, 'AA', int4range(1, 107), 15); -- failure here
INSERT INTO alteridx_orig VALUES(NULL, 0, 1, 'AA', int4range(102, 107), 15); -- failure here
INSERT INTO alteridx_orig VALUES(0, NULL, 1, 'AA', int4range(102, 107), 15); -- failure here
INSERT INTO alteridx_orig VALUES(0, 0, 1, 'AA', int4range(102, 107), 15);
SELECT * FROM alteridx_orig;
--
--
CREATE UNIQUE INDEX alteridx_new_uniq_key ON alteridx_orig(uniq);
CREATE UNIQUE INDEX alteridx_new_uniq_key_incl ON alteridx_orig(uniq) INCLUDE (ir);
CREATE UNIQUE INDEX alteridx_new_uniq_key_incl2 ON alteridx_orig(uniq) INCLUDE (parity);
CREATE UNIQUE INDEX CONCURRENTLY alteridx_new_uniq_key_back ON alteridx_orig USING BTREE(uniq);
CREATE UNIQUE INDEX alteridx_new_uniq_key_pred ON alteridx_orig(uniq) WHERE parity=1;
CREATE INDEX alteridx_new_uniq_key_no_unique ON alteridx_orig(uniq);
CREATE UNIQUE INDEX alteridx_new_uniq_key_with_msg ON alteridx_orig(uniq, msg);
CREATE UNIQUE INDEX alteridx_new_msg_key_ops ON alteridx_orig(msg text_pattern_ops);
CREATE UNIQUE INDEX alteridx_new_pkey ON alteridx_orig(id);
CREATE INDEX alteridx_new_ir_excl ON alteridx_orig using gist(ir range_ops);
CREATE INDEX alteridx_new_expr_excl ON alteridx_orig((id + uniq)) WHERE (id > 2);
CREATE INDEX alteridx_new_expr_excl_hash ON alteridx_orig USING hash((id + uniq)) WHERE (id > 2);
CREATE INDEX alteridx_new_expr_excl_pred ON alteridx_orig((id + uniq)) WHERE (id > 3);
CREATE INDEX alteridx_new_expr_excl_pred2 ON alteridx_orig((id + uniq)) WHERE (id > (3 - 1));
CREATE INDEX alteridx_new_expr_excl_wrong ON alteridx_orig((id - uniq)) WHERE (id > 2);
CREATE INDEX alteridx_new_expr_excl1 ON alteridx_orig((id + uniq)) WHERE (parity < 4);
CREATE INDEX another_alteridx_new_expr_excl ON another_alteridx((id + 4));
CREATE INDEX another_alteridx_new_expr_excl_different ON another_alteridx((id + 2 + 2));
CREATE INDEX another_alteridx_new_expr_excl_different2 ON another_alteridx((id + (2 + 2)));
CREATE UNIQUE INDEX alteridx_new_double ON alteridx_orig(id, uniq);
CREATE INDEX alteridx_new_double_not_unique ON alteridx_orig(id, uniq);
CREATE UNIQUE INDEX alteridx_id_key ON alteridx_orig(id);
--
CREATE UNIQUE INDEX third_alteridx_pkey_new ON third_alteridx(id1, id2);
CREATE UNIQUE INDEX third_alteridx_pkey_opp ON third_alteridx(id2, id1);
CREATE UNIQUE INDEX third_alteridx_pkey_single ON third_alteridx(id1);
CREATE INDEX third_alteridx_pkey_not_unique ON third_alteridx(id1, id2);
--
CREATE UNIQUE INDEX alteridx_new_partition_key_key
ON alteridx_orig(partition_key);
CREATE UNIQUE INDEX alteridx_new_partition_key_id_key
ON alteridx_orig(partition_key,id);
CREATE UNIQUE INDEX partitioned_new_alteridx_partition_key_key
ON partitioned_orig_alteridx(partition_key);
CREATE UNIQUE INDEX partitioned_new_alteridx_partition_key_id_key
ON partitioned_orig_alteridx(partition_key,id);

--
CREATE UNIQUE INDEX alteridx_new_uniq_key_opt ON alteridx_orig(uniq);
UPDATE pg_index SET indoption='1'
FROM pg_class i WHERE indexrelid = i.oid AND i.relname = 'alteridx_new_uniq_key_opt';
CREATE UNIQUE INDEX alteridx_new_msg_key_coll ON alteridx_orig(msg);
UPDATE pg_index SET indcollation='12341'
FROM pg_class i WHERE indexrelid = i.oid AND i.relname = 'alteridx_new_msg_key_coll';
--
--
-- Tests for unique constraint --
--
--
SELECT * FROM show_indexes_from_relation('alteridx_orig');
SELECT * FROM show_index_exprs_pred('alteridx_orig');
SELECT * FROM show_index_dependencies_on_table_columns(
	'{"alteridx_new_uniq_key_incl",
	  "alteridx_new_uniq_key_incl2",
	  "alteridx_orig_expr_excl1",
	  "alteridx_new_expr_excl1"}'::name[]);
SELECT * FROM show_indexes_from_relation('partitioned_orig_alteridx');
SELECT * FROM show_indexes_from_relation('another_alteridx');
SELECT * FROM show_index_exprs_pred('another_alteridx');
SELECT * FROM show_constraints_named_like('another_%');
DROP INDEX alteridx_orig_uniq_key; -- failure here
SELECT * FROM show_constraints_named_like('alteridx_%');
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_parity_check
USING INDEX alteridx_new_uniq_key; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_uniq_key
USING INDEX alteridx_orig_uniq_key;
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_uniq_key
USING INDEX alteridx_new_uniq_key;
--
SELECT * FROM show_constraints_named_like('alteridx_%');
SELECT * FROM show_indexes_from_relation('alteridx_orig');
DROP INDEX alteridx_orig_uniq_key;
DROP INDEX alteridx_new_uniq_key; -- failure here
SELECT * FROM show_indexes_from_relation('alteridx_orig');
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key
USING INDEX alteridx_new_uniq_key_incl2;
--
--
-- Checking that all dependencies on simply-referenced columns are correctly
-- added for old constraint index (included columns may differ in the old and
-- new constraint index).
--
--
SELECT * FROM show_some_indexes_from_relation(
	'alteridx_orig',
	'{"alteridx_new_uniq_key_incl", "alteridx_new_uniq_key_incl2"}'::name[]);
SELECT * FROM show_index_dependencies_on_table_columns(
	'{"alteridx_new_uniq_key_incl", "alteridx_new_uniq_key_incl2"}'::name[]);

ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_incl2
USING INDEX alteridx_new_uniq_key_incl;

SELECT * FROM show_some_indexes_from_relation(
	'alteridx_orig',
	'{"alteridx_new_uniq_key_incl", "alteridx_new_uniq_key_incl2"}'::name[]);
SELECT * FROM show_index_dependencies_on_table_columns(
	'{"alteridx_new_uniq_key_incl", "alteridx_new_uniq_key_incl2"}'::name[]);
--
DROP INDEX alteridx_new_uniq_key;
DROP INDEX alteridx_new_uniq_key_incl; -- failure here
SELECT * FROM show_constraints_named_like('alteridx_%');
SELECT * FROM show_indexes_from_relation('alteridx_orig');
SELECT * FROM show_index_exprs_pred('alteridx_orig');
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_incl
USING INDEX alteridx_new_uniq_key_back;
--
SELECT * FROM show_constraints_named_like('alteridx_%');
--
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_back
USING INDEX alteridx_new_uniq_key_pred; -- failure here
DROP INDEX alteridx_new_uniq_key_pred;
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_back
USING INDEX alteridx_new_uniq_key_no_unique; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_msg_key
USING INDEX alteridx_new_msg_key_coll; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_msg_key
USING INDEX alteridx_new_msg_key_ops; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_msg_key
USING INDEX alteridx_new_uniq_key_incl; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_back
USING INDEX another_alteridx_uniq_key; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_back
USING INDEX alteridx_new_uniq_key_with_msg; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_back
USING INDEX alteridx_new_uniq_key_opt; -- failure here
--
--
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_double
USING INDEX alteridx_new_uniq_key_incl; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_double
USING INDEX alteridx_new_double_not_unique; -- failure here
--
--
-- Checking the notification if the replica identity index is no longer used in
-- the constraint.
--
--
ALTER TABLE alteridx_orig REPLICA IDENTITY USING INDEX alteridx_orig_double;
SELECT * FROM show_indexes_from_relation('alteridx_orig');

ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_double
USING INDEX alteridx_new_double;
SELECT * FROM show_indexes_from_relation('alteridx_orig');
--
--
-- Checking that deferrable constraints cannot use replica identity index
--
--
ALTER TABLE alteridx_orig REPLICA IDENTITY USING INDEX alteridx_id_key;
SELECT * FROM show_indexes_from_relation('alteridx_orig');
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_id_key_deferrable
USING INDEX alteridx_id_key; -- failure here

ALTER TABLE alteridx_orig REPLICA IDENTITY DEFAULT;
SELECT * FROM show_indexes_from_relation('alteridx_orig');
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_id_key_deferrable
USING INDEX alteridx_id_key;
--
--
SELECT * FROM show_constraints_named_like('alteridx_%');
SELECT * FROM show_indexes_from_relation('alteridx_orig');
ALTER TABLE alteridx_orig DROP CONSTRAINT alteridx_orig_double; -- failure here
ALTER TABLE alteridx_orig DROP CONSTRAINT alteridx_new_double;
DROP INDEX alteridx_orig_double;
DROP INDEX alteridx_new_double_not_unique;
--
--
-- Tests for primary key constraint --
--
--
SELECT * FROM show_constraints_named_like('alteridx_%');
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_pkey
USING INDEX alteridx_new_pkey;
SELECT * FROM show_constraints_named_like('alteridx_%');
--
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_pkey
USING INDEX another_alteridx_uniq_key; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_pkey
USING INDEX another_alteridx_pkey; -- failure here
--
SELECT * FROM show_indexes_from_relation('third_alteridx');
SELECT * FROM show_constraints_named_like('third_%');

ALTER TABLE third_alteridx ALTER CONSTRAINT third_alteridx_pkey
USING INDEX third_alteridx_pkey_opp; -- failure here
ALTER TABLE third_alteridx ALTER CONSTRAINT third_alteridx_pkey
USING INDEX third_alteridx_pkey_not_unique; -- failure here
ALTER TABLE third_alteridx ALTER CONSTRAINT third_alteridx_pkey
USING INDEX third_alteridx_pkey_single; -- failure here
ALTER TABLE third_alteridx ALTER CONSTRAINT third_alteridx_pkey
USING INDEX third_alteridx_pkey_new;

SELECT * FROM show_indexes_from_relation('third_alteridx');
SELECT * FROM show_constraints_named_like('third_%');

--
--
-- Tests for exclusion constraint --
--
--
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_ir_excl
USING INDEX alteridx_new_ir_excl;
SELECT * FROM show_constraints_named_like('alteridx_%');
--
ALTER TABLE alteridx_orig ADD CONSTRAINT alteridx_new_expr_excl2
EXCLUDE ((id + uniq) WITH =) WHERE (id > 2);
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_expr_excl
USING INDEX alteridx_new_expr_excl2; -- failure here
ALTER TABLE alteridx_orig DROP CONSTRAINT alteridx_new_expr_excl2;
--
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_expr_excl
USING INDEX alteridx_orig_ir_excl; -- failure here
--
--
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_expr_excl
USING INDEX alteridx_new_expr_excl_wrong; -- failure here
--
--
-- Checking that after simplifying the constants from index predicates some
-- indexes are considered equal.
--
--
SELECT * FROM show_some_index_exprs_pred(
	'alteridx_orig',
	'{"alteridx_orig_expr_excl",
	  "alteridx_new_expr_excl_pred",
	  "alteridx_new_expr_excl_pred2"}'::name[]);
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_expr_excl
USING INDEX alteridx_new_expr_excl_pred; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_expr_excl
USING INDEX alteridx_new_expr_excl_pred2;
--
--
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_expr_excl_pred2
USING INDEX alteridx_new_expr_excl_hash; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_expr_excl_pred2
USING INDEX alteridx_new_expr_excl;
--
--
-- Checking that all dependencies on columns from index expressions and/or index
-- predicate are not removed for new constraint index (they always exist both
-- for standalone and constraint indexes).
--
--
SELECT * FROM show_some_indexes_from_relation(
	'alteridx_orig',
	'{"alteridx_orig_expr_excl1", "alteridx_new_expr_excl1"}'::name[]);
SELECT * FROM show_index_dependencies_on_table_columns(
	'{"alteridx_orig_expr_excl1", "alteridx_new_expr_excl1"}'::name[]);

ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_expr_excl1
USING INDEX alteridx_new_expr_excl1;

SELECT * FROM show_some_indexes_from_relation(
	'alteridx_orig',
	'{"alteridx_orig_expr_excl1", "alteridx_new_expr_excl1"}'::name[]);
SELECT * FROM show_index_dependencies_on_table_columns(
	'{"alteridx_orig_expr_excl1", "alteridx_new_expr_excl1"}'::name[]);
--
--
SELECT * FROM show_index_exprs_pred('alteridx_orig');
DROP INDEX alteridx_new_expr_excl_wrong;
ALTER TABLE alteridx_does_not_exist ALTER CONSTRAINT alteridx_orig_expr_excl
USING INDEX alteridx_new_expr_excl_wrong; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_expr_excl
USING INDEX alteridx_new_expr_excl_wrong; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_expr_excl
USING INDEX alteridx_new_expr_excl_wrong; -- failure here
--
DROP INDEX alteridx_new_expr_excl_pred;
DROP INDEX alteridx_orig_expr_excl;
DROP INDEX alteridx_new_expr_excl_hash;
DROP INDEX alteridx_new_expr_excl; -- failure here
SELECT * FROM show_index_exprs_pred('alteridx_orig');

ALTER TABLE another_alteridx ALTER CONSTRAINT another_alteridx_expr_excl
USING INDEX another_alteridx_new_expr_excl;
--
--
-- Checking that after simplifying the constants from index expressions some
-- indexes are considered equal.
--
--
SELECT * FROM show_some_index_exprs_pred(
	'another_alteridx',
	'{"another_alteridx_new_expr_excl",
	  "another_alteridx_new_expr_excl_different",
	  "another_alteridx_new_expr_excl_different2"}'::name[]);
ALTER TABLE another_alteridx ALTER CONSTRAINT another_alteridx_new_expr_excl
USING INDEX another_alteridx_new_expr_excl_different; -- failure here
ALTER TABLE another_alteridx ALTER CONSTRAINT another_alteridx_new_expr_excl
USING INDEX another_alteridx_new_expr_excl_different2;

SELECT * FROM show_indexes_from_relation('another_alteridx');
SELECT * FROM show_constraints_named_like('another_%');
--
--
-- Checking that DDL changes can be rolled back
--
--
SELECT * FROM show_indexes_from_relation('alteridx_orig');

BEGIN;
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_pkey
USING INDEX alteridx_orig_pkey;
SELECT * FROM show_indexes_from_relation('alteridx_orig');
ROLLBACK;

SELECT * FROM show_indexes_from_relation('alteridx_orig');
--
--
-- Checking constraints in partitions and partitioned tables
--
--
SELECT * FROM show_alteridx_index_dependencies();
SELECT * FROM show_alteridx_constraint_dependencies();

ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_partition_key_key
USING INDEX alteridx_new_partition_key_key; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_partition_key_id_key
USING INDEX alteridx_new_partition_key_id_key; -- failure here

ALTER TABLE partitioned_orig_alteridx
ALTER CONSTRAINT partitioned_orig_alteridx_partition_key_key
USING INDEX partitioned_new_alteridx_partition_key_key; -- failure here
ALTER TABLE partitioned_orig_alteridx
ALTER CONSTRAINT partitioned_orig_alteridx_partition_key_id_key
USING INDEX partitioned_new_alteridx_partition_key_id_key; -- failure here

ALTER TABLE partitioned_orig_alteridx DETACH PARTITION alteridx_orig;

SELECT * FROM show_alteridx_index_dependencies();
SELECT * FROM show_alteridx_constraint_dependencies();
SELECT * FROM show_indexes_from_relation('alteridx_orig');

ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_partition_key_key
USING INDEX alteridx_new_partition_key_key;
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_orig_partition_key_id_key
USING INDEX alteridx_new_partition_key_id_key;

ALTER TABLE partitioned_orig_alteridx
ALTER CONSTRAINT partitioned_orig_alteridx_partition_key_key
USING INDEX partitioned_new_alteridx_partition_key_key; -- failure here
ALTER TABLE partitioned_orig_alteridx
ALTER CONSTRAINT partitioned_orig_alteridx_partition_key_id_key
USING INDEX partitioned_new_alteridx_partition_key_id_key; -- failure here
--
--
-- Dropping replaced indexes
--
--
DROP INDEX alteridx_orig_ir_excl;
DROP INDEX alteridx_orig_pkey;
DROP INDEX alteridx_new_uniq_key_no_unique;
DROP INDEX alteridx_new_uniq_key_incl;
DROP INDEX alteridx_new_msg_key_coll;
DROP INDEX alteridx_new_msg_key_ops;
--
-- Trying to drop indexes used in constraints after replacement
--
DROP INDEX alteridx_new_pkey; -- failure here
DROP INDEX alteridx_new_uniq_key_back; -- failure here
DROP INDEX alteridx_orig_msg_key; -- failure here
DROP INDEX alteridx_new_ir_excl; -- failure here
DROP INDEX alteridx_new_uniq_key_opt;
--
SELECT * FROM show_indexes_from_relation('alteridx_orig');
SELECT * FROM show_constraints_named_like('alteridx_%');
--
--
-- Checking that indexes unavailable for use can't be picked for replacement
--
--
CREATE UNIQUE INDEX alteridx_new_uniq_key_not_live ON alteridx_orig(uniq);
CREATE UNIQUE INDEX alteridx_new_uniq_key_not_valid ON alteridx_orig(uniq);
CREATE UNIQUE INDEX alteridx_new_uniq_key_not_ready ON alteridx_orig(uniq);
UPDATE pg_index SET indislive=false
FROM pg_class i WHERE indexrelid = i.oid AND i.relname = 'alteridx_new_uniq_key_not_live';
UPDATE pg_index SET indisvalid=false
FROM pg_class i WHERE indexrelid = i.oid AND i.relname = 'alteridx_new_uniq_key_not_valid';
UPDATE pg_index SET indisready=false
FROM pg_class i WHERE indexrelid = i.oid AND i.relname = 'alteridx_new_uniq_key_not_ready';
SELECT * FROM show_indexes_from_relation('alteridx_orig');
--
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_back
USING INDEX alteridx_new_uniq_key_not_live; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_back
USING INDEX alteridx_new_uniq_key_not_valid; -- failure here
ALTER TABLE alteridx_orig ALTER CONSTRAINT alteridx_new_uniq_key_back
USING INDEX alteridx_new_uniq_key_not_ready; -- failure here
--
DROP INDEX alteridx_new_uniq_key_not_live;
DROP INDEX alteridx_new_uniq_key_not_valid;
DROP INDEX alteridx_new_uniq_key_not_ready;
--
SELECT * FROM show_indexes_from_relation('alteridx_orig');
SELECT * FROM show_index_exprs_pred('alteridx_orig');
SELECT * FROM show_constraints_named_like('alteridx_%');
--
--
-- Checking that constraints still work
--
--
INSERT INTO alteridx_orig VALUES(1, 0, 1, 'AA', int4range(102, 103), 17); -- failure here
INSERT INTO alteridx_orig VALUES(0, 1, 1, 'AA', int4range(104, 105), 17); -- failure here
INSERT INTO alteridx_orig VALUES(0, 0, 1, 'AA', int4range(100, 107), 17); -- failure here
INSERT INTO alteridx_orig VALUES(0, 0, 1, 'AA', int4range(102, 107), 17); -- failure here
INSERT INTO alteridx_orig VALUES(NULL, 0, 1, 'AA', int4range(102, 107), 17); -- failure here
INSERT INTO alteridx_orig VALUES(0, NULL, 1, 'AA', int4range(102, 107), 17); -- failure here
INSERT INTO alteridx_orig VALUES(-1, -1, 1, 'BB', int4range(108, 110), 17);
--
SELECT * FROM alteridx_orig;
--
--
DROP FUNCTION show_indexes_from_relation(searched_relname name);
DROP FUNCTION show_constraints_named_like(searched_conname name);
DROP FUNCTION show_index_exprs_pred(searched_relname name);
DROP TABLE alteridx_orig;
DROP TABLE partitioned_orig_alteridx;
DROP TABLE another_alteridx;
DROP TABLE third_alteridx;
