<!-- doc/src/sgml/pgamcheck.sgml -->

<sect1 id="pgamcheck" xreflabel="pg_amcheck">
 <title>pg_amcheck</title>

 <indexterm zone="pgamcheck">
  <primary>pg_amcheck</primary>
 </indexterm>

 <para>
  The <filename>pg_amcheck</filename> module provides a command line interface
  to the <xref linkend="amcheck"/> corruption checking functionality.
 </para>

 <para>
  <application>pg_amcheck</application> is a regular
  <productname>PostgreSQL</productname> client application. You can perform
  corruption checks from any remote host that has access to the database
  connecting as a user with sufficient privileges to check tables and indexes.
  Currently, this requires execute privileges on <xref linkend="amcheck"/>'s
  <function>bt_index_parent_check</function> and <function>verify_heapam</function>
  functions, and on having privileges to access the relations being checked.
 </para>

<synopsis>
pg_amcheck [OPTION]... [DBNAME [USERNAME]]
  General options:
    -V, --version                output version information, then exit
    -?, --help                   show this help, then exit
    -s, --strict-names           require include patterns to match at least one entity each
    -o, --on-error-stop          stop checking at end of first corrupt page

  Schema checking options:
    -n, --schema=PATTERN         check relations in the specified schema(s) only
    -N, --exclude-schema=PATTERN do NOT check relations in the specified schema(s)

  Table checking options:
    -t, --table=PATTERN          check the specified table(s) only
    -T, --exclude-table=PATTERN  do NOT check the specified table(s)
    -b, --startblock             begin checking table(s) at the given starting block number
    -e, --endblock               check table(s) only up to the given ending block number
    -f, --skip-all-frozen        do NOT check blocks marked as all-frozen
    -v, --skip-all-visible       do NOT check blocks marked as all-visible

  TOAST table checking options:
    -z, --check-toast            check associated toast tables and toast indexes
    -Z, --skip-toast             do NOT check associated toast tables and toast indexes
    -B, --toast-startblock       begin checking toast table(s) at the given starting block
    -E, --toast-endblock         check toast table(s) only up to the given ending block

  Index checking options:
    -x, --check-indexes          check btree indexes associated with tables being checked
    -X, --skip-indexes           do NOT check any btree indexes
    -i, --index=PATTERN          check the specified index(es) only
    -I, --exclude-index=PATTERN  do NOT check the specified index(es)
    -c, --check-corrupt          check indexes even if their associated table is corrupt
    -C, --skip-corrupt           do NOT check indexes if their associated table is corrupt
    -a, --heapallindexed         check index tuples against the table tuples
    -A, --no-heapallindexed      do NOT check index tuples against the table tuples
    -r, --rootdescend            search from the root page for each index tuple
    -R, --no-rootdescend         do NOT search from the root page for each index tuple

  Connection options:
    -d, --dbname=DBNAME          database name to connect to
    -h, --host=HOSTNAME          database server host or socket directory
    -p, --port=PORT              database server port
    -U, --username=USERNAME      database user name
    -w, --no-password            never prompt for password
    -W, --password               force password prompt (should happen automatically)
</synopsis>

 <sect2>
  <title>Options</title>

  <para>
   To specify which database server <application>pg_amcheck</application> should
   contact, use the command line options <option>-h</option> or
   <option>--host</option> and <option>-p</option> or
   <option>port</option>. The default host is the local host
   or whatever your <envar>PGHOST</envar> environment variable specifies.
   Similarly, the default port is indicated by the <envar>PGPORT</envar>
   environment variable or, failing that, by the compiled-in default.
  </para>
 
  <para>
   Like any other <productname>PostgreSQL</productname> client application,
   <application>pg_amcheck</application> will by default connect with the
   database user name that is equal to the current operating system user name.
   To override this, either specify the <option>-U</option> option or set the
   environment variable <envar>PGUSER</envar>. Remember that
   <application>pg_amcheck</application> connections are subject to the normal
   client authentication mechanisms (which are described in <xref
   linkend="client-authentication"/>).
  </para>
 
  <para>
   To restrict checking of tables and indexes to specific schemas, specify the
   <option>-s</option> or <option>--schema</option> option with a pattern.
   To exclude checking of tables and indexes within specific schemas, specify
   the <option>-N</option> or <option>--exclude-schema</option> option with
   a pattern.
  </para>
 
  <para>
   To specify which tables are checked, specify the
   <option>-t</option> or <option>--table</option> option with a pattern.
   To exclude checking of tables, specify the
   <option>-T</option> or <option>--exclude-table</option> option with a
   pattern.
  </para>
 
  <para>
   To check indexes associated with checked tables, specify the
   <option>-i</option> or <option>--check-indexes</option> option.  Only
   indexes on tables which are being checked will themselves be checked.  To
   check all indexes in a database, all tables on which the indexes exist must
   also be checked.  This restriction may be relaxed in the future.
  </para>
 
  <para>
   To restrict the range of blocks within a table that are checked, specify the
   <option>-b</option> or <option>--startblock</option> and/or
   <option>-e</option> or <option>--endblock</option> options with numeric
   values for the starting and ending block numbers.  Although these options
   make the most sense when applied to a single table, if specified along with
   options that select multiple tables, each table check will be restricted to
   the specified blocks.  If <option>--startblock</option> is omitted, checking
   begins with the first block. If <option>--endblock</option> is omitted,
   checking continues to the end of the relation.
  </para>
 
  <para>
   Some users may wish to periodically check tables without incurring the cost
   of rechecking older table blocks, presumably because those blocks have
   already been checked in the past.  There is at present no perfect way to do
   this.  Although the <option>--startblock</option> and <option>--endblock</option>
   options can be used to restrict blocks, the user is not expected to have
   perfect knowledge of which blocks have already been checked, and in any
   event, some blocks that were previously checked may have been subject to
   modification since the last check.  As an approximation to the desired
   functionality, one can specify the
   <option>-f</option> or <option>--skip-all-frozen</option> option, or
   alternatively the
   <option>-v</option> or <option>--skip-all-visible</option> option to skip
   blocks marked in the visibility map as all-frozen or all-visible,
   respectively.
  </para>
 </sect2>

 <sect2>
  <title>Example Usage</title>

  <para>
   For table corruption, each detected corruption is reported on two lines, the
   first line shows the location and the second line shows a message describing
   the problem.
  </para>

  <para>
   Checking an entire database which contains one corrupt table, "mytable",
   along with the output:
  </para>

<screen>
% pg_amcheck --check-toast --skip-indexes mydb
(relname=mytable,blkno=17,offnum=12,attnum=)
xmin 4294967295 precedes relation freeze threshold 17:1134217582
(relname=mytable,blkno=960,offnum=4,attnum=)
data begins at offset 152 beyond the tuple length 58
(relname=mytable,blkno=960,offnum=4,attnum=)
tuple data should begin at byte 24, but actually begins at byte 152 (3 attributes, no nulls)
(relname=mytable,blkno=960,offnum=5,attnum=)
tuple data should begin at byte 24, but actually begins at byte 27 (3 attributes, no nulls)
(relname=mytable,blkno=960,offnum=6,attnum=)
tuple data should begin at byte 24, but actually begins at byte 16 (3 attributes, no nulls)
(relname=mytable,blkno=960,offnum=7,attnum=)
tuple data should begin at byte 24, but actually begins at byte 21 (3 attributes, no nulls)
(relname=mytable,blkno=1147,offnum=2,attnum=)
number of attributes 2047 exceeds maximum expected for table 3
(relname=mytable,blkno=1147,offnum=10,attnum=)
tuple data should begin at byte 280, but actually begins at byte 24 (2047 attributes, has nulls)
(relname=mytable,blkno=1147,offnum=15,attnum=)
number of attributes 67 exceeds maximum expected for table 3
(relname=mytable,blkno=1147,offnum=16,attnum=1)
attribute 1 with length 4294967295 ends at offset 416848000 beyond total tuple length 58
(relname=mytable,blkno=1147,offnum=18,attnum=2)
final toast chunk number 0 differs from expected value 6
(relname=mytable,blkno=1147,offnum=19,attnum=2)
toasted value for attribute 2 missing from toast table
(relname=mytable,blkno=1147,offnum=21,attnum=)
tuple is marked as only locked, but also claims key columns were updated
(relname=mytable,blkno=1147,offnum=22,attnum=)
multitransaction ID 1775655 is from before relation cutoff 2355572
</screen>

  <para>
   For index corruption, the output is more free-form, and may span differing
   numbers of lines per corruption detected.
  </para>

  <para>
   Checking an entire database which contains one corrupt index,
   "corrupt_index", with corruption in the page header, along with the output:
  </para>

<screen>
% pg_amcheck --check-toast --check-indexes --schema=public --table=table_with_corrupt_index mydb
index check failed for index corrupt_index of table table_with_corrupt_index:
ERROR:  XX002: index "corrupt_index" is not a btree
LOCATION:  _bt_getmeta, nbtpage.c:152
</screen>

  <para>
   Checking again after rebuilding the index but corrupting the contents,
   along with the output:
  </para>

<screen>
% pg_amcheck --check-toast --check-indexes --schema=public --table=table_with_corrupt_index mydb
index check failed for index corrupt_index of table table_with_corrupt_index:
ERROR:  XX002: index tuple size does not equal lp_len in index "corrupt_index"
DETAIL:  Index tid=(39,49) tuple size=3373 lp_len=24 page lsn=0/2B548C0.
HINT:  This could be a torn page problem.
LOCATION:  bt_target_page_check, verify_nbtree.c:1125
</screen>

 </sect2>
</sect1>
