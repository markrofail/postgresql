<!-- doc/src/sgml/key-management.sgml -->

<chapter id="key-management">
 <title>Encryption Key Management</title>

 <indexterm zone="key-management">
  <primary>key management</primary>
 </indexterm>

 <para>
  <productname>PostgreSQL</productname> supports
  <firstterm>Encryption Key Management System</firstterm>, which is enabled when
  <productname>PostgreSQL</productname> is build with <literal>--with-openssl</literal>
  and <xref linkend="app-initdb-cluster-passphrase-command"/> is specified during
  <command>initdb</command>. The cluster passphrase provided by
  <option>--cluster-passphrase-command</option> option during <command>initdb</command>
  and the one generated by <xref linkend="guc-cluster-passphrase-command"/> in the
  <filename>postgresql.conf</filename> must match, otherwise, the database cluster
  will not startup, unless the cluster passphrase is changed described in
  <xref linkend="key-management-rotation"/>.
 </para>

 <para>
  The user-provided cluster passphrase is derived into a
  <firstterm>Key Encryption Key</firstterm>, which is used to encapsulate the
  <firstterm>Master Encryption Keys</firstterm> during the <command>initdb</command>
  process. The encapsulated encryption keys are stored at
  <filename>pg_cryptokeys</filename>.
 </para>

 <para>
  Encryption key management system provides several functions to allow user to
  use the master encryption key to wrap and unwrap their own encryption secrets such
  as encryption key and password during encryption and decryption operations. This
  feature allows users to encrypt and decrypt data without knowing the actual key.
 </para>

 <sect1 id="key-management-wrap-unwrap">
  <title>Wrap and Unwrap User Secret</title>

  <para>
   Encryption key management system provides several functions described in
   in <xref linkend="functions-key-management-table"/>, to wrap and unwrap user
   secrets with the encryption keys, which are uniquely and securely
   stored inside the database cluster. Wrap and unwrap functions provides
   integrity checking, to see if the wrapped data was modified.
  </para>

  <para>
   These functions allow user to encrypt and decrypt user data without having
   to provide user encryption secret in plain text. One possible use case is
   to use encryption key management system together with <xref linkend="pgcrypto"/>.
   User wraps the user encryption secret with <function>pg_wrap</function> function
   and passes the wrapped encryption secret to <function>pg_unwrap</function>
   function for the <structname>pgcrypto</structname> encryption functions.
   The wrapped secret can be stored in the application server or somewhere
   secured and should obtained promptly for cryptographic operation with
   <structname>pgcrypto</structname>.
  </para>

  <para>
   Here is an example that shows how to encrypt and decrypt data together with
   wrap and unwrap functions:
  </para>

<programlisting>
=# SELECT pg_wrap('my secret passward');
                                                                              pg_wrap
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 \xb2c89f76f04f95d029f179e0fc3df4ed7254127b5562a9e27d42d1cd037c942dea65ce7c0750c520fa4f4e90481c9eb7e1e42a068248c262c1a6f25c6eab64303b1154ccc9a14361223641aab4a7aabe
(1 row)
</programlisting>

  <para>
   Once wrapping the user key, user can encrypt and decrypt user data using the
   wrapped user key together with the key unwrap functions:
  </para>

<programlisting>
 =# INSERT INTO tbl
        VALUES (pgp_sym_encrypt('secret data',
                                 pg_unwrap('\xb2c89f76f04f95d029f179e0fc3df4ed7254127b5562a9e27d42d1cd037c942dea65ce7c0750c520fa4f4e90481c9eb7e1e42a068248c262c1a6f25c6eab64303b1154ccc9a14361223641aab4a7aabe')));
 INSERT 1

 =# SELECT * FROM tbl;
                                                                             col
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 \xc30d04070302a199ee38bea0320b75d23c01577bb3ffb315d67eecbeca3e40e869cea65efbf0b470f805549af905f94d94c447fbfb8113f585fc86b30c0bd784b10c9857322dc00d556aa8de14
(1 row)

 =# SELECT pgp_sym_decrypt(col,
                           pg_unwrap('\xb2c89f76f04f95d029f179e0fc3df4ed7254127b5562a9e27d42d1cd037c942dea65ce7c0750c520fa4f4e90481c9eb7e1e42a068248c262c1a6f25c6eab64303b1154ccc9a14361223641aab4a7aabe')) as col
    FROM tbl;
     col
--------------
 secret data
(1 row)
</programlisting>

  <para>
   The data <literal>'secret data'</literal> is practically encrypted by the
   user secret <literal>'my secret passward'</literal> but using wrap and
   unwrap functions user don't need to know the actual user secret during
   operation.
  </para>
 </sect1>

 <sect1 id="key-management-rotation">
  <title>Cluster Passphrase Rotation</title>

  <para>
   Encryption keys are not interminable, and possibility of key being breached
   increases longer that a key is in use. Key rotation replaces old key with new
   key and allows them to minimize their exposure to such an attacker. Rotating
   keys on a regular basis help meet standardized security practices such as
   <ulink url="https://www.pcisecuritystandards.org/">PCI-DSS</ulink> and is a
   security best practice to limit the number of encrypted bytes available for a
   specific key version. The key lifetime are based on key length, key strength,
   algorithm and total number of bytes enciphered.
  </para>

  <para>
   In <productname>PostgreSQL</productname> encryption key management, a key
   is the cluster passphrase. Cluster passphrase rotation is represented by
   generating a new version of the cluster passphrase, and making that version
   as the primary version. It rotates the cluster passphrase to the new one
   and re-encrypt the all master encryption keys with it again. The data that have
   been encrypted with the master encryption keys doesn't need to be re-encrypted
   again because the raw master encryption keys don't change.
  </para>

  <para>
   To rotate the cluster passphrase user firstly needs to update
   <xref linkend="guc-cluster-passphrase-command"/> in the
   <filename>postgresql.conf</filename> so that
   <productname>PostgreSQL</productname> can obtain a new encryption passphrase.
   Then execute <function>pg_rotate_cluster_passphrase</function> function to
   rotates the passphrase.
  </para>
 </sect1>
</chapter>
