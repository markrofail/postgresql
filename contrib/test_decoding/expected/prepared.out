-- predictability
SET synchronous_commit = on;
SELECT 'init' FROM pg_create_logical_replication_slot('regression_slot', 'test_decoding');
 ?column? 
----------
 init
(1 row)

SELECT 'init' FROM pg_create_logical_replication_slot('regression_slot_2pc', 'test_decoding');
 ?column? 
----------
 init
(1 row)

CREATE TABLE test_prepared1(id integer primary key);
CREATE TABLE test_prepared2(id integer primary key);
-- Reused queries
\set get_no2pc 'SELECT data FROM pg_logical_slot_get_changes(''regression_slot_2pc'', NULL, NULL, ''include-xids'', ''0'', ''skip-empty-xacts'', ''1'');'
\set get_with2pc 'SELECT data FROM pg_logical_slot_get_changes(''regression_slot'', NULL, NULL, ''include-xids'', ''0'', ''skip-empty-xacts'', ''1'', ''twophase-decoding'', ''1'');'
\set get_with2pc_nofilter 'SELECT data FROM pg_logical_slot_get_changes(''regression_slot'', NULL, NULL, ''include-xids'', ''0'', ''skip-empty-xacts'', ''1'', ''twophase-decoding'', ''1'', ''twophase-decode-with-catalog-changes'', ''1'');'
-- test simple successful use of a prepared xact
BEGIN;
INSERT INTO test_prepared1 VALUES (1);
PREPARE TRANSACTION 'test_prepared#1';
:get_with2pc
                        data                        
----------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:1
 PREPARE TRANSACTION 'test_prepared#1'
(3 rows)

:get_no2pc
 data 
------
(0 rows)

COMMIT PREPARED 'test_prepared#1';
:get_with2pc
 data 
------
(0 rows)

:get_no2pc
                        data                        
----------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:1
 COMMIT
(3 rows)

INSERT INTO test_prepared1 VALUES (2);
-- test abort of a prepared xact
BEGIN;
INSERT INTO test_prepared1 VALUES (3);
PREPARE TRANSACTION 'test_prepared#2';
:get_no2pc
                        data                        
----------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:2
 COMMIT
(3 rows)

:get_with2pc
                        data                        
----------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:2
 COMMIT
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:3
 PREPARE TRANSACTION 'test_prepared#2'
(6 rows)

ROLLBACK PREPARED 'test_prepared#2';
:get_no2pc
 data 
------
(0 rows)

:get_with2pc
 data 
------
(0 rows)

INSERT INTO test_prepared1 VALUES (4);
-- test prepared xact containing ddl
BEGIN;
INSERT INTO test_prepared1 VALUES (5);
ALTER TABLE test_prepared1 ADD COLUMN data text;
INSERT INTO test_prepared1 VALUES (6, 'frakbar');
PREPARE TRANSACTION 'test_prepared#3';
SELECT 'test_prepared_1' AS relation, locktype, mode
FROM pg_locks
WHERE locktype = 'relation'
  AND relation = 'test_prepared1'::regclass;
    relation     | locktype |        mode         
-----------------+----------+---------------------
 test_prepared_1 | relation | RowExclusiveLock
 test_prepared_1 | relation | AccessExclusiveLock
(2 rows)

:get_no2pc
                        data                        
----------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:4
 COMMIT
(3 rows)

:get_with2pc
                        data                        
----------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:4
 COMMIT
(3 rows)

-- Test that we decode correctly while an uncommitted prepared xact
-- with ddl exists. Our 2pc filter callback will skip decoding of xacts
-- with catalog changes at PREPARE time, so we don't decode it now.
--
-- Use a separate table for the concurrent transaction because the lock from
-- the ALTER will stop us inserting into the other one.
--
-- We should see '7' before '5' in our results since it commits first.
--
INSERT INTO test_prepared2 VALUES (7);
:get_with2pc
                        data                        
----------------------------------------------------
 BEGIN
 table public.test_prepared2: INSERT: id[integer]:7
 COMMIT
(3 rows)

:get_no2pc
                        data                        
----------------------------------------------------
 BEGIN
 table public.test_prepared2: INSERT: id[integer]:7
 COMMIT
(3 rows)

COMMIT PREPARED 'test_prepared#3';
:get_no2pc
                                  data                                   
-------------------------------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:5
 table public.test_prepared1: INSERT: id[integer]:6 data[text]:'frakbar'
 COMMIT
(4 rows)

:get_with2pc
                                  data                                   
-------------------------------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:5
 table public.test_prepared1: INSERT: id[integer]:6 data[text]:'frakbar'
 PREPARE TRANSACTION 'test_prepared#3';
 COMMIT PREPARED 'test_prepared#3';
(5 rows)

-- make sure stuff still works
INSERT INTO test_prepared1 VALUES (8);
INSERT INTO test_prepared2 VALUES (9);
:get_with2pc
                                data                                
--------------------------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:8 data[text]:null
 COMMIT
 BEGIN
 table public.test_prepared2: INSERT: id[integer]:9
 COMMIT
(6 rows)

:get_no2pc
                                data                                
--------------------------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:8 data[text]:null
 COMMIT
 BEGIN
 table public.test_prepared2: INSERT: id[integer]:9
 COMMIT
(6 rows)

-- If we do something that takes a strong lock on a catalog relation we need to
-- read in order to decode a transaction we deadlock; we can't finish decoding
-- until the lock is released, but we're waiting for decoding to finish so we
-- can make a commit/abort decision.
---
BEGIN;
INSERT INTO test_prepared1 VALUES (10, 'othercol');
CLUSTER test_prepared1 USING test_prepared1_pkey;
INSERT INTO test_prepared1 VALUES (11, 'othercol2');
PREPARE TRANSACTION 'test_prepared_lock';
SELECT 'pg_class' AS relation, locktype, mode
FROM pg_locks
WHERE locktype = 'relation'
  AND relation = 'pg_class'::regclass;
 relation | locktype | mode 
----------+----------+------
(0 rows)

-- Shouldn't see anything with 2pc decoding off
:get_no2pc
 data 
------
(0 rows)

-- If we try to decode it now we'll deadlock
SET statement_timeout = '10s';
:get_with2pc_nofilter
-- FIXME we expect a timeout here, but it actually works...
ERROR: statement timed out

RESET statement_timeout;
-- we can decode past it by skipping xacts with catalog changes
-- and let it be decoded after COMMIT PREPARED, though.
:get_with2pc
 data 
------
(0 rows)

COMMIT PREPARED 'test_prepared_lock';
-- Both will work normally after we commit
:get_no2pc
                                    data                                    
----------------------------------------------------------------------------
 BEGIN
 table public.test_prepared1: INSERT: id[integer]:10 data[text]:'othercol'
 table public.test_prepared1: INSERT: id[integer]:11 data[text]:'othercol2'
 COMMIT
(4 rows)

:get_with2pc
 data 
------
(0 rows)

-- cleanup
DROP TABLE test_prepared1;
DROP TABLE test_prepared2;
SELECT pg_drop_replication_slot('regression_slot');
 pg_drop_replication_slot 
--------------------------
 
(1 row)

SELECT pg_drop_replication_slot('regression_slot_2pc');
 pg_drop_replication_slot 
--------------------------
 
(1 row)

